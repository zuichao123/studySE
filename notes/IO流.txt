其实就是：字节流读取文字字节数据后，不直接操作而是先查指定的编码表，获取对应的文字，再对这个文字进行操作，简单说：字节流+编码表。

----------------------------------------

字节流的两个顶层父类：
1，InputStream    2，OutputStream

字符流的两个顶层父类：
1，Reader         2，Writer

就从熟悉的文字开始字符流：
//需求：将一些文字存储到硬盘中的一个文件中
FileWriter
//需求：读取一个文本文件
FileReader

记住：如果要操作文字数据，建议优先考虑字符流。而且要将数据从内存写到硬盘上，要使用字符流中的输出流Writer

==================================================
字符流缓冲区：
BufferedWriter
	newLine();//换行
BufferedReader
	readLine();//读取一行，默认自动读取下一行
	
	
装饰设计模式：
	对一组对象的功能进行增强时，就可以使用该设计模式进行问题的解决。
	
装饰和继承都能实现功能的扩展增强。
有什么区别呢：

首次有一个继承体系：
Writer
	|--TextWriter：用于操作文本
	|--MediaWriter：用于操作媒体
	
想要带操作的动作进行效率的提高。
按照面向对象，可以通过继承对具体对象今次那个功能的扩展。
效率提高需要加入缓冲技术。

Writer
	|--TextWriter：用于操作文本
		|--BufferTextWriter：加入了缓冲技术的操作文本的对象。
	|--MediaWriter：用于操作媒体
		|--BufferMediaWriter：加入了缓冲技术的操作文本的对象。
		
到这里就哦了。但是这样做好像并不理想。
如果这个体系进行功能扩展，又多了流对象。
那么这个流要提高效率，是不是也要产生子类呢？是，这时就会发现只为提高功能，进行的继承，
导致继承体系越来越臃肿。不够灵活。
		
重新思考这个问题：
既然加入的都是同一种技术--缓冲。
前一种是让缓冲和具体的缓冲和流对象相结合。
可不可以将缓冲进行单独的封装，哪个对象需要缓冲就将哪个对象和缓冲关联。
Class Buffer{
	Buffer(TextWriter w){}
	
	Buffer(MediaWriter M){}
}

Class BufferWriter extends Writer{
	BufferWriter(Writer w){}
}
Writer
	|--TextWriter：用于操作文本
	|--MediaWriter：用于操作媒体
	|--BufferWriter；用于提高效率。
	
装饰比继承灵活。
特点：装饰类和被装饰类都必须所属同一个接口或者父类。


字符流：
Writer Reader
FileReader
FileWriter
BufferedReader
BufferedWriter


======================
转换流：
InputStreamReader:字节到字符的桥梁。解码。
OutputStreamWriter:字符到字节的桥梁。编码。

流的操作规律：

1，明确源和目的（汇）
	源：InputStream Reader
	目的：OutputStream Writer
	
2，明确数据是否是纯文本数据
	源：是纯文本：Reader
	   	否：Inputstream
	目的：是纯文本：Writer
		否：OutputStream
		
	到这里，就可以明确需求中具体要使用哪个体系。
	
3.明确具体的设备
	源设备	：
		硬盘：File
		键盘：System。in
		内存：数组
		网络：Socket流
	目的设备：
		硬盘：File
		控制台：显示器System。out
		内存：数组
		网络：	Socket流
		
4，是否需要其他额外功能
	1，是否需要高效（缓冲区）：
		需要：就加上buffer
		
		
		
	

需求1：复制一个文本文件
	1，明确源和目的；
		源：InputStream Reader
		目的：OutputStream Writer
	2，是否是纯文本：
		是：源：Reader
		        目的：Writer
	3，明确具体设备：
		源：硬盘：File
		目的：硬盘：File
		
		FileReader fr = new FileReader("a.txt");
		FileWriter fw = new FileWriter("b.txt");
	4,需要额外功能么？
		需要：
		BufferedReader bufr = new BufferedReader(new FileReader("a.txt"));
		BufferedWriter bufw = new BufferedWriter(new FileWriter("b.txt"));
===================================
需求2：读取键盘录入信息，并写入到一个文件中
	1，明确源和目的：
		源：InputStream Reader
		目的：OutputStream Writer
	2.是否是纯文本呢？
		是，
		源：Reader
		目的：Writer
	3,明确设备：
		源：键盘：System.in	
		目的：硬盘：File
		
		InputStream in = System.in;
		FileWriter fw = new FileWriter("b.txt");
		这样做可以完成，但是麻烦。将读取的字节数据转成字符串，再由字符流操作。
	4，需要额外功能吗？
		需要：转换：将字节流转成字符流，因为明确的源是Reader，这样操作文本数据更便捷。
				所以要将已有的字节流转成字符流。使用字节-->字符。InputStreamReader
			InputStreamReader isr = new InputStreamReader(System.in);
			FileWriter fw = new FileWriter("b.txt");
			
		还需要功能吗：
			需要：想高效。
			BufferedReader bufr = new BufferedReader(new InputStreamReader(System.in));
			BufferedWriter bufw = new BufferedWriter(new FileWriter("b.txt"));
		
=========================
需求3：将一个文本文件数据显示控制台上
	1，明确源和目的：
		源：InputStream Reader
		目的：OutputStream Writer
	2。是否是纯文本：
		是：源：Reader
		        目的：Writer
	3，明确设备：
		源：硬盘；File
		目的：控制台：System。out
	
		FileReader fr = new FileReader("a.txt");
		OutputStream out = System.out;
	4，需要额外功能吗？
		需要：转换。
		FileReader fr = new FileReader("a.txt");
		OutputStreamWriter osw = new OutputStreamWriter(System.out);
		需要高效吗？
		需要：
		BufferedReader bufr = new BufferedReader(new FileReader("a.txt"));
		BufferedWriter bufw = new BufferedWriter(new OutputStreamWriter(System.out));
================================
需求4，读取键盘录入数据，显示在控制台上
	1，明确源和目的：
		源：InputStream Reader
		目的：OutputStream Writer
	2，是否是纯文本：
		是：
		源：Reader
		目的：Writer
	3，明确设备：
		源：键盘：System。in
		目的：控制台：System。out
		
		InputStream  in = System.in;
		OutputStream out = System.out;
	4，明确额外功能？
		需要转换，因为都是字节流，但是操作的却是文本数据。
			  所以使用字符流操作起来更为便捷。
			  InputStreamReader isr = new InputStreadReader(System.in);
			  OutputStreamWriter osw = new OutputStreamWriter(System.out);
		为了将其高效：
			BufferedReader bufr = new BufferedReader(new InputStreamReader(System.in));
			BufferedWriter bufw = new BufferedWriter(new OutputStreamWriter(System.out));
============================		
5,将一个文件符串数据按照指定的编码表写入到一个文本文件中
	1。 目的：OutputStream Writer
	2. 是纯文本：Writer
	3. 设备：硬盘：File
	FileWriter fw = new FileWriter("a.txt");
	fw.write("你好");
	
	注意：既然需求中已经明确了指定编码表的动作。 
	那就不可以使用FileWriter，因为FileWriter内部是使用默认的本地码表。
	只能使用其父类。OutputStreamWriter
	OutputStreamWriter 接受一个字节输出流对象，既然是操作文件，那么该对象应该是FileOutputStream
	
	OutputStreamWriter osw = new OutputStreamWriter(new FileOutputSream("a.txt"),charsetName);
	
	需要高效吗？
	BufferedWriter bufw = new BufferedWriter(new OutputStreamWriter(new FileOutputSream("a.txt"),charsetName));
	
什么时候使用转换流？
	1,源或者目的对应的设备时字节流，但是操作的却是文本数据，可以使用转换流作为桥梁。
		提高对文本操作的便捷。
	2.一旦操作文本涉及到具体的指定编码表时，必须使用转换流。
		        
		    
		    
================================================
============IO包中的其他类===========================
打印流：可以直接操作输入流和文件（负责目的）
	PrintStream（字节打印流）
		 * 1,提供了打印方法可以对多种数据类型值进行打印，并保持数据的表示形式。
		 * 2，它不抛IOExcetion
		 * 
		 * 构造函数：
		 * 1，字符串路径
		 * 2.File对象
		 * 3，字节输出流
	PrintStream：字节打印流(保证数据的原样时用)
		 * 构造函数参数：
		 * 1，字符串路径
		 * 2，File对象、
		 * 3，字节输出流
		 * 4，字符输出流
		 * 另外：使用newLine()方法，必须BufferedWriter
		 
序列流：对多个流进行合并（负责源）
	SequenceInputStream：MergeFile
		将1.tex 2.txt 3.txt等文件中的数据合并到同一个文件中;不确定源（是文本还是媒体）的情况下用字节流

操作对象：被操作的对象需要实现Serializable(标记接口)；操作对象的流，对象持久化
	ObjectInputStream：
	ObjectOutputStream：将Java对象的基本数据类型和图像写入OutputStream
	
	* Serializable:用于给被序列化的类加id号的、
 	* 用于判断类和对象是否是同一个
	* transient:非瞬态（序列化的时候，不想被序列化时，可以使用这个关键字修饰）
	  
RandomAccessFile:随机访问文件，自身具备读写的方法（目的只能是文件(包括文本文件、媒体文件)
		 * 不是io体系中的子类
		 * 通过skipbytes(int x), seek(int x)来达到随机访问。
		 * 一般多线程写入时用到此对象。
		 * 特点：
		 * 1,该对象既能读，又能写；
		 * 2,该对象内部维护了一个byte数组，并通过指针可以操作数组中的元素；
		 * 3,可以通过getFilePointer方法获取指针的位置，和通过seek方法设置指针的位置。
		 * 4,其实该对象就是将字节输入流和输出流，进行了封装。
		 * 5,该对象的源或者目的只能是文件，通过构造函数就可以看出。
		        
管道流：输入输出可以直接进行连接，通过结合线程使用。
	管道输入流应该连接到管道输出流，管道输入流提供要写入管道输出流的所有数据字节。通常，数据由某个线程从 PipedInputStream 对象读取，并由其他线程将其写入到相应的 PipedOutputStream。不建议对这两个对象尝试使用单个线程，因为这样可能死锁线程。管道输入流包含一个缓冲区，可在缓冲区限定的范围内将读操作和写操作分离开。如果向连接管道输出流提供数据字节的线程不再存在，则认为该管道已损坏。
	PipedInputStream:
	PipedOutputStream:
	
操作基本数据类型：数据输出流允许应用程序以适当方式将基本Java数据类型写入输出流中，然后，应用程序可以使用数据数据输入流将数据读入。
	DataInputStream:
	DataOutputStream:
	
操作字节数组：操作源和目的都是内存的流对象。
	ByteArrayInputStream：此类实现了一个输出流，其中的数据被写入到一个byte数组中。缓冲区会随着数据的不断写入而自动增长。流关闭无效（因为操作的是内存，没有调用过底层资源）此类中的方法在关闭此流后仍可被调用。
	ByteArrayOutputStream：
	
操作字符数组：
	CharArrayReader：
	CharArrayWrite：

操作字符串：
	StringReader：
	StringWriter：
	
		        
===========================================================
编码表：
	        
		        
		        
		        