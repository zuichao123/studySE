掌握String类的两种实例化方式
	一个字符串就是String类的匿名对象。
掌握String类的两种比较操作
	==比较的是地址值
	equals计较的是具体值
深入分析String类两种实例化的区别
	在String中可以使用直接复制和new调用构造方法的方式完成，
	使用直接复制的方式可以有效节省内存空间，
	使用直接赋值的方式只需要一个实例化对象即可；
	而new的方式需要两个实例化对象；
	开发中最后直接使用直接赋值的操作。
	实际上字符串内容的改变，改变的是地址的指向。

String类的常用方法：
	返回int类型：
		length()
			取得字符串长度
		indexOf(String str)
			从头开始查找指定的字符串位置
		indexOf(String str,int fromIndex)
			从指定位置开始查找指定的字符串位置

	返回byte类型：
		getBytes()
			将一个字符串变为byte数组
		

	返回char类型：
		toCharArray()
			将字符串变成字符数组
		charAt(int index)
			从一个字符串中取出指定位置的字符

	返回Sring类型：
		subString(int beginIndex)
			从指定位置开始，一致取到尾进行字符串的截取
		subString(int begin,int end)
			指定截取字符串的开始点和结束点
		split(String regex)
			按照指定的字符串对字符串进行拆分
		toUpperCase()
			将一个字符串全部变成大写字母
		toLowerCase()
			将一个字符串全部变成小写字母
		replaceAll(String regex,String replacement)
			字符串替换
		String(char[] value)
			将一个字符数组变为字符串
		String(char[] value,int offset,int count)
			将指定范围的字符数组变为字符串
		String(byte[] bytes)
			将一个byte数组变为字符串
		string(byte[] bytes,int offset, intlength)
			将指定范围的字节byte数组变为字符串
		trim()
			清除左右两端的空格
			
	返回Boolean类型：
		startsWith(String prefix)
			判断是否以指定的字符串开头
		endsWith(String suffix)
			判断是否以指定的字符串结尾
		equals(String str)
			判断两个字符串内容是否相等
		equalsIgnoreCase(String str)
			不区分大小写比较两个字符串是否相等
	
	
字符串与byte数组的转换：一般在IO操作中经常用到。