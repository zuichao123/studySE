trim()：去空格；
输出对象时，默认调用toString()方法；
一个好的类，应该覆写Object类中的：
	1.toString()方法
	2.equals()方法
	3.hashCode()方法

				封装性
this:代表当前对象
	如果一个类中有多个构造方法时，可以使用this关键字调用。
	在使用this关键字调用其他构造方法时：
		1.this()只能放在代码的首行；
		2.至少有一个构造方法是不用this()调用的，否则会出现构造方法递归调用。
		
static关键字：声明全局属性。
	最好使用类名调用。
	使用static不能调用非static的方法和属性。
		因为：static可以在对象没有实例化时就可以调用，而非static属性和方法，在实例化后才能被调用。

java中到底有多少个内存区域呢？
	1.栈内存：可以保持对象的名称（保存，访问的堆内存的地址）
	2.堆内存：保存每个对象的具体属性
	3.全局数据区：保存static类型的属性
	4.全局代码区：保存所有方法的定义

代码块：
	普通代码块；
		定义在方法中
	构造块；
		定义在类中；
		构造块优先于构造方法执行，且执行多次，只要一有实例化对象产生，就执行构造块中的内容。
	静态代码块：
		在主方法中定义的代码块；
		优先于主方法执行。只执行一次。
		
	静态块优先于主方法执行，如果在普通类中定义的静态块，优先于构造块执行，不管有多少个实例化对象产生，静态代码块只执行一次，静态代码块的主要功能就是为静态属性初始化。
	
构造方法私有化：单例模式：核心，就是将类的构造方法私有化，之后在类的内部产生实例化对象，并通过类的静态方法返回实例化对象的引用。
	的好处？
		1.对象唯一
		
对象数组：就是指包含了一组相关的对象，里面的每一个对象都是null值，使用时必须分别进行实例化操作。
	格式：类   对象数组名称[] = new 类[数组长度]
		Aa aa[] = new Aa[10];
		
内部类：编译后生成：外部类$内部类名称.class
	缺点：正常的一个类操作时，在类中最好只定义属性或方法。如果定义一个类的话，则肯定破坏了程序的一个结构。
	优点：可以方便的访问外部类中的私有属性。	
	
	使用static关键字定义内部类后，可以使用外部类名称.内部类名称来调用。
	
	一个内部类除了可以通过外部类访问，也可以直接在其他类中调用，格式：
		外部类.内部类   内部类对象 = 外部类实例.new 内部类();
		
	方法中定义内部类：如果该内部类要访问此方法的变量时，此变量必须定义为final。

链表：	
	增加节点是在链表的最后进行增加；
	查找节点就是依次递归的方式查找；
	删除节点，实际上就是改变引用传递的地址。
	
**********************************
			继承性	

继承：extends子类继承父类，扩展功能。
	通过super关键字，可以从子类访问父类中的内容。

	方法的重载与覆写的区别：
		重载：方法名相同，参数的类型或个数不同；对权限没有要求；发生在一个类中。
		覆写：方法名称、参数的类型、返回值类型全部相同；被覆写的方法不能拥有更严格的权限；反生在继承类中。
	
	不管任何时候，子类实例化对象时，默认先去调用父类中的无参构造方法，再调用子类的构方法。

this与super关键字的区别：
	this：
		属性访问：访问本类中的属性，如果本类没有此属性则从父类中继续查找；
		方法：访问本类中的方法，如果本类中没有此方法，则从父类中继续查找；
		调用构造：调用本类构造，必须放在构造方法的首行；
		特殊：表示当前对象。
	super：
		属性访问：访问父类中的属性；
		方法：直接访问父类中的方法；
		调用构造：调用父类构造，必须放在子类构造方法的首行；
		特殊：无此概念。
	this和super都可以调用构造方法，而且必须放在构造方法的首行，所以这两个关键字不能同时使用。

final关键字：
	可以使用final关键字声明类、属性、方法：
		使用final关键字声明的类不能有子类；
		使用final关键字声明的方法不能被子类所覆写；
		使用final关键字声明的变量即成为常量，常量不可以修改。
		
抽象类：
	包含一个抽象方法的类就称为抽象类；
	抽象类，不能被实例化；
	抽象类，必须有子类；子类必须覆写抽象类中的全部抽象方法。
	抽象类，不能使用final关键字声明。
	抽象类，是可以定义构造方法的，并且子类在实例化之前肯定要先对父类进行实例化。也可以通过super关键字明确指定调用的构造方法（传参）。
抽象方法：
	只声明而未实现的方法称为抽象方法，必须使用abstract关键字声明。
	
	抽象类必须被子继承，子类如果不是抽象类必须覆写抽象类中的全部抽象方法。
	

**接口：
	是一种特殊的类，里面全部是由全局常量（static final）和公共的抽象方法所组成；

	接口中的抽象方法可以不加abstract关键字，而抽象类中的抽象方法必须加；

	接口的使用必须有子类，子类必须覆写全部抽象方法，implements关键字实现，一个子类可以同时实现多个接口；
	 则子类如果不是抽象类的话，肯定要覆写接口中的全部抽象方法。
	
	实现：
		class 类名 implements 接口A,接口b{}
	
	**继承抽象类实现接口：
		一个子类可以同时继承抽象类和实现接口；
		格式如下：
			class 子类    extends 抽象类    implements 接口A,接口B...{s}
	
	接口不能继承抽象类，但是抽象类可以实现多个接口；
	
	一个接口可以同时继承多个接口，实现接口的多继承。
	
******************************
			多态性
java中的多态性主要体现在：
	1.方法的重载：发生在本类（根据传入的参数不同，完成的功能也不同）
	       方法的覆写：子类覆写父类中的方法；
	2.对象的多态性：
		1.向上转型：子类的实例化对象由父类接收；（自动完成）
			向上转型，程序会自动完成，格式：
				父类     父类对象     =  子类实例;
				
			向上转型，其实就是为了调用子类中覆写过的方法；
			
		2.向下转型：父类的实例化对象由子类接收；（需要强制）
				 在发生向下转型关系之前必须先发生向上的转型关系。
			向下转型，必须明确的指明要转型的子类类型，格式：
				子类     子类对象     = (子类)父类实例;

			向下转型，其实就是为了调用父类中没有被覆写过的方法；
			
			向下转型时，最好进行验证（使用instanceof），避免类转换异常。

	对象在向下转型时，一定要先进行向上转型。

***
	一个类永远不要去继承一个已经实现好的类，而只能继承抽象类或实现接口。
***


instanceof关键字：
	在java中可以使用instanceof关键字判断一个对象是否是某个类的实例。


*
**抽象类与接口的实现：
	在java中可以通过对象的多态性，为抽象类和接口实例化，这样在使用抽象类和接口的时候就可以调用本子类中所覆写过的方法了。
	
	接口实际上还表示将方法的视图暴露给远程的客户端。
	
  ***设计模式：
	
	**工厂设计模式：
		得到接口实例的过渡端，称为工厂。
	**代理设计模式：
		一个代理主题来操作真实主题，真实主题执行具体业务操作，而代理主题负责其他相关业务的代理。
	**适配器设计模式：
		在java的图形界面上用到非常多。
		例如：如果一个子类实现了一个接口，则肯定在子类中必须覆写此接口中的全部抽象方法，那么这样一来，如果一个接口中提供的抽象方法过多，而且，没有必要全部实现的话，肯定很浪费。
			就是用一个抽象类，实现接口中的所有方法，然后在用一个子类取继承抽象类后，根据需要实现需要使用的方法。
	**内部类扩展：
		在抽象类中可以定义内部接口；
		在接口中也可以定义内部抽象类；


****抽象类和接口的区别？
	抽象类：
		定义：包含一个抽象方法的类；
		组成：构造方法、抽象方法、普通方法、常量、变量
		使用：子类继承抽象类（extends）
		关系：抽象类可以实现多个接口；
		对象：都通过对象的多态性产生实例化对象；
		局限：抽象类有单继承的局限；
		实际：作为一个模板；
		选择：如果抽象类和接口都可以用的话，优先使用接口，因为避免单继承的局限；
		特殊：一个抽象类中可以包含多个接口，一个接口中可以包含多个抽象类；
		常见设计模式:模板设计；
	接口：	
		定义：抽象方法和全局常量的集合；
		组成：常量、抽象方法；
		使用：子类实现接口（implements）
		关系：接口不能继承抽象类，但允许继承多个接口；
		对象：通过对象的多态性产生实例化对象；
		局限：接口没有局限；
		实际：是作为一个标准或是表示一种能力
		选择：如果抽象类和接口都可以用的话，优先使用接口，因为避免单继承的局限；
		特殊：一个抽象类中可以包含多个接口，一个接口中可以包含多个抽象类；
		常见设计模式:工厂设计、代理设计；
		
	重要提示：
		一个类永远不要继承一个已经实现好的类，要么继承抽象类，要么实现接口，如果接口和抽象类同时都可以使用的话，那么优先使用接口，避免单继承的出现。
				
Object类：如果一个类没有明确继承的类，则默认继承object类。
	
	Object类中的主要方法：
		public Object();构造方法
		一个完整的类，应该覆写以下三个Object类分方法：
		public boolean equals(Object obj);对象比较时调用
		public int hashCode();取得Hash码
		public String toString();对象打印时调用
		
		String类也是Object类的子类。
		
	Object是所有类的父类，则所有类的对象都可以使用Object接收，但是Object不光可以接收对象，还可以接收任意的引用数据类型（接口、数组等）。


包装类：
	因为java的宗旨是：一切皆对象，而八种基本数据类型不是对象，所有需要将八种数据类型包装成对象。
		把int包装成一个类，这样就可以使用对象操作基本数据类型了。
		
			int		Integer
			char	Character
			short 	Short
			long	Long
			float	Float
			double	Double
			boolean	Boolean
			byte	Byte
			
		Integer Byte Float Double Short Long都属于Number类的子类，Number类本身提供了一系列的返回以上六种基本数据类型的操作。
			Number类是一个抽象类，主要是将数字包装类中内容变为基本数据类型。
				主要方法如下：
					public byte void Value();以byte形式返回指定的数值
					public abstract double doubleValue();以double形式返回指定的数值
					public abstract float floatValue();以float形式返回指定的数值
					public abstract int intValue();以int形式返回指定的数值
					public abstract long longValue();以long形式返回指定的数值
					public short shortValue();以short形式返回指定的数值
		
		Character属于Object的直接子类。
		
		Boolean属于Object的直接子类。
	
	装箱及拆箱：
		装箱：将基本数据类型变为包装类称为装箱；
		拆箱：将包装类的类型变为基本数据类型称为拆箱。
		
		自动装箱：
			Integer i = 30;
		自动拆箱：
			int x = i;
	
	包装类应用：
		将一个全由数字组成的字符串转变成int或者float类型的数据。
			A、Integer类（字符串转int型）
				public static int parseInt(String s)throws NumberFormatException
				
			B、Float类（字符串转float型）
				public static float parseFloat(String s)throws NumberFormatException		
	
		
匿名内部类：
	内部类：在一个类的内部还有另一个类称为内部类；
	匿名内部类：如果一个类在整个操作过程中，只使用一次的话，就可以将其定义为匿名内部类。
			匿名内部类是在接口及抽象类的基础上发展起来的。
		
异常（Exception）：	
	导致程序中断运行的一种指令流。
	try中捕获异常，出现异常之后的代码将不再被执行，而是跳转到相应的catch语句中执行，用于处理异常。
	对于异常可以设置其统一的出口，使用finally完成。		
	
	异常类的继承结构：
		最常用的类：Exception、Error，这两个类全都是Throwable的子类。
		Exception：一般表示的是程序中出现的问题，可以直接使用try...catch处理。
		Error：一般指的是JVM错误，程序中无法处理。	
		
		一般在输出异常信息的时候，可以直接使用System.out.println()打印异常对象。
		也可以通过Exception提供的一个方法，public void printStackTrace()方法。
	
	java的异常处理机制：
		1.一旦产生异常，则首先会产生一个异常类的实例化对象；
		2.在try语句中对此异常进行捕捉；
		3.产生的异常对象与catch语句中的各个异常类型进行匹配，如果匹配成功，则执行catch语句中的代码。	
		
	在异常处理中，捕获更粗的异常要放在捕获更细的异常之后。	
		
	throw和throws关键字：
		throws关键字：
			使用throws声明的方法表示此方法不处理异常，而交给方法的调用处进行处理。
			格式：
				public 返回值类型   方法名称(参数列表。。。)throws 异常类{}
		throw关键字：
			作用是在程序中抛出一个异常，抛出的是一个异常类的实例化对象；		
			格式：
				throw new Exception("coutent");
		
	***RuntimeException与Exception的区别？
		在java的异常处理机制中：
			1.如果抛出的是Exception的类型，则必须使用try...catch进行处理；
			2.如果抛出的是RuntimeException的类型，则不是必须使用try...catch处理，一旦发生异常之后将由JVM进行处理，但是为了保证程序的健康性，建议在有可能发生异常的地方还是老实的使用try...catch进行处理。	
	
	自定义异常类：
		只需要继承Exception就可以完成自定义异常类。因为在JAVA中提供的都是标准的异常类（包括一些异常信息等待），如果需要定义自己想要的异常信息的时候就可以自定义异常类。			
		
		
	断言：
		就是肯定某一个结果的返回值是正确的，如果最终此结果的返回值是错误的，则通过断言检查肯定会为用户提示错误信息。
		格式：
			assert Boolean表达式；
			assert boolean表达式：详细的信息	
		
包及访问控制权限：
	所谓的包实际上就是一个文件夹；
	打包命令：
		javac -d . 类名.java
		javac -d . *.java
	包的导入：
		import 报名称.子包名称.类名称;//手工导入
		import 报名称.子包名称.*;//JVM自动导入
	系统常见包：	
		java.lang
			此包为基础包，像String这样的类就保存在此包之中；
		java.lang.reflect
			此包为反射机制的包，是java.lang的子包；
		java.util
			此包为工具包，一些常用的类库、日期操作等都在此包之中；
		java.text
			提供了一些文本的处理类库；
		java.sql
			数据库操作包，提供了各种数据库操作的类和接口；
		java.net
			完成网络编程；
		java.io
			输入、输出处理
		java.awt
			包含了构成抽象窗口工具集（abstract window toolkits）的多个类，这些类被用来构建和管理应用程序的图形用户界面（GUI）；
		javax.swing
			此包用于建立图形用户界面，此包中的组件相对于java.awt而言是轻量级组件。	
			
	静态导入：
		如果一个类中的方法都是static的，则可以通过静态导入；
		格式：
			import static 包名.类名.*;

	jar命令：
		将所有的*.class文件压缩成一个文件交付给可以使用，这个文件就叫jar文件。
		如果想要生成jar文件，直接使用	jdk中bin目录里的jar.exe就可以将所有的类文件进行压缩。
		主要参数：
			“T”：查看jar包中的内容；
			“C”：创建新的文档；
			“V”：生成详细的输出信息；
			“F”：指定存档的文件名。
		打jar包命令：
			javac -d . 类名.java
			jar  -cvf  打成jar包后的名称.jar  要打包的文件夹或文件
			一个jar包如果想要使用的话，则必须配置classpath路径；
				set classpath = .; d:\xx\xx.jar	
					类文件所在的当前文件夹和jar包所在的目录			

	访问控制权限：
		private：不能被类的外部所看到；
		default：可以在本包中的任意地方访问；
		protected：包含，不同包的非子类不可以访问；
		public：公共的，都可以访问，不受任何的限制。

java命名规范：
	类：所有单词的首字母大写；
	方法：第一个单词的首字母小写，之后的每个单词的首字母大写；
	属性：第一个单词的首字母小写，之后的每个单词的首字母大写；
	包：所有单词的字母小写；
	常量：所有单词的字母大写。


回顾：
		当产生了一个类之后，为了保证类中的内容不被外部直接看到，则使用private关键字；
		但是，如果现在两个有关系的类要进行属性互相访问的话，之前只能使用getter/setter取得和设置，
	所以为了减少私有属性的访问的麻烦，使用了内部类，但是内部类本身会破坏程序的结构。
		为了让一个类的内容可以继续访问的时候，使用了继承的概念，但是在继承中private属性也是无法被子类
	看到的，所以此时，为了方便子类的操作，可以将属性使用protected进行封装，这样一来外部也无法直接看到（不同包）。	
		之后有了继承的概念，既然有了父子的关系，所有就可以使用向上或向下的转型操作，以完成多态性，但是在开发中类
	与类之间的直接继承并不多见，而往往是继承抽象类或实现接口，当若干个操作间需要解耦合的时候就可以使用接口完成。
		既然有内部类，则如果一个接口或抽象类的子类只使用一次，则可以将其定义为匿名内部类。
		开发中没有包的类是绝对不存在的。
		继承-->封装-->多态。	

多线程：
	1)java中的多线程实现：
		1.继承Thread类：
			Thread类是在java.lang包中定义的，一个类只要继承了Thread类，此类就称为多线程操作类。
			在Thread子类之中，必须明确的覆写Thread类中的run()方法，此方法为线程的主体：
			多线程定义语法：
				class 类名称    extends Thread{	//继承Thread类
					属性...;					//类中定义属性
					方法...;					//类中定义方法
					//覆写Thread类中的run()方法，此方法时线程的主体
					public void run(){
						线程主体...;
					}
				}
				
			native关键字：是一个由Java调用本机操作系统函数的一个关键字。
			
			一个线程对象只能启动一次。
			
		2.实现Runnable接口：
			在Java中也可以通过实现Runnable接口的方式实现多线程，Runnable接口中只定义了一个抽象方法；
				public void run();
			通过Runnable接口实现多线程：
				class 类名称    implements Runnable{		//实现Runnable接口
					属性...;				//类中定义属性
					方法...;				//类中定义方法
					public void run(){		//覆写Runnable接口里的run()方法
						线程主体;
					}
				}
				
			利用Thread类中的可以接收Runnable接口实例的构造方法，启动线程；
			
			因为接口可以避免单继承，所有使用Runnable接口方式；
			
			Thread类也是Runnable接口的子类；
				
		3.Thread类和Runnable接口的区别？
			使用Thread类在操作多线程的时候，无法达到资源共享的目的；而使用Runnable接口实现的多线程操作可以实现资源共享。

		4.实现Runnable接口比继承Thread类的优点：
			1.适合多个相同程序代码的线程去处理同一个资源；
			2.可以避免由于单继承局限所带来的影响；
			3.增强了程序的健壮性，代码能够被多个线程共享，代码与数据是独立的；
			结论：
				开发中使用实现Runnable接口是最合适的。
				
		5.线程的状态：
			创建状态：准备好了一个多线程的对象：Thread t = new Thread();
			
			就绪状态：调用了start()方法，等待CPU进行调度；
			
			运行状态：执行run()方法；
			
			阻塞状态：暂时停止执行，可能将资源交给其他线程使用；
		
			终止状态：(死亡状态)：线程执行完毕了，不再使用了。
			
			结论：
				实际上，线程在调用start()方法的时候不是立刻启动的，而是要等待CPU进行调度的。
		6.总结：
			1.进程和线程的区别，关系？
				线程是在进程的基础上划分的；
				线程消失了进程不会消失，进程如果消失了，则线程肯定消失。
			2.Java实现多线程的两种方式：
				继承Thread类
				实现Runnable接口
			3.线程的启动，通过start()方法完成，需要进行CPU调度，调用start()方法实际上调用的就是run()方法；
			4，Thread类也是Runnable接口的子类，使用了代理机制完成；
			5.在使用多线程的时候建议通过实现Runnable接口的方式实现，这样可以避免由于单继承所带来的开发局限，而且通过使用
			  Runnable接口也可以达到资源共享的目的。
	
	2)线程的常用操作方法：
		public Thread(Runnable target);
			构造方法；接收Runnable接口子类对象，实例化Thread对象；
		public Thread(Runnable target,String name);
			构造方法；接收Runnable接口子类对象，实例化Thread对象，并设置线程名称；
		public Thread(String name);
			构造方法；实例化thread对象，并设置线程名称；
		public static Thread currentThread();
			普通方法；返回目前正在执行的线程；
		public final String getName();
			普通方法；返回线程的名称；
		public final int getPriority();
			普通方法；发挥线程的优先级；
		public boolean isInterrupted();
			普通方法；判断目前线程是否被中断，如果是，返回true；否则返回false；
		public final boolean isAlive();
			普通方法；判断线程是否在活动，如果是，返回true；否则返回false；
		public final void join() throws InterruptedException
			等待线程死亡；
		public final synchronized void join(long millis)throws InterruptedException
			等待millis毫秒后，线程死亡；
		public void run();
			普通方法；执行线程；
		public final void setName(String name);
			普通方法；设定线程名称；
		public final void setPrioriy(int newPriority);
			普通方法；设定线程的优先值；
		public static void sleep(long millis)throws InterruptedException
			普通方法；使目前正在执行的线程休眠millis毫秒；
		public void start();
			普通方法；开始执行线程；
		public static void yield();
			普通方法；将目前正在执行的线程暂停，允许其它线程执行；
		public final void setDaemon(boolean on);
			普通方法；讲一个线程设置成后台运行；
		public final void setPriority(int newPriority);
			普通方法；更改线程的优先级；

	3)线程名称：
		在Thread类中，可以通过currentThread().getName()方法取得线程的名称，通过currentThread().setName()方法设置线程的名称；
		线程的名称一般在启动线程前设置，但也允许为已经运行的线程设置名称。允许两个Thread对象有相同的名字，但为了清晰，应该尽量避免这种情况的发生；
		另外，如果程序并没有为线程指定名称，则系统会自动的为线程分配一个名称。

		Java运行时，至少启动了两个线程：1.主线程；2.GC（垃圾回收线程）

	4)判断线程是否运行：
		同过isAlive()方法，判断线程是否执行完毕；
		
	5)线程的强制运行：
		使用join()方法让一个线程强制运行，线程强制运行期间，其他线程无法运行，必须等到此线程完成之后才可以继续执行。

	6)线程的休眠：
		使用sleep()方法停止线程运行；

	7)中断线程：
		当一个线程运行的时候，另外一个线程可以直接通过interrupt()方法，中断其运行状态；
		
	8)后台线程：
		使用setDaemon()方法可以实现设置一个后台线程。

	9)线程的优先级：
		在Java的线程操作中，所有的线程在运行前都会保持在就绪状态，那么此时，哪个线程的优先级高，哪个线程就有可能会先被执行；

	10)线程的礼让：
		在线程操作中，也可以使用yield()方法将一个线程的操作暂时让给其他线程执行。

	11)同步：多个线程在访问统一资源的时候，需要进行同步操作；
		要想解决资源共享的同步操作问题，可以使用同步代码块及同步方法两种方式完成。
		
		1.同步代码块：
			-普通代码块：是直接定义在方法之中的；
			-构造块：是直接定义在类中的，优先于构造方法 执行，重复调用；
			-静态块：是使用static关键字声明的，优先于构造块执行，只执行一次；
			-同步代码块：使用synchronized关键字声明的代码块，称为同步代码块。
				定义格式：
					synchronized(同步对象){
						需要同步的代码；
					}
		2.同步方法：
			可以使用synchronized关键字将一个方法声明成同步方法；
			定义格式：
				synchronized 方法返回值    方法名称(参数列表){}
	12)死锁：
		资源共享时需要进行同步操作；
		程序中过多的同步容易造成死锁。
	
	13)唤醒：
		notify();
		notifyAll();
		一般来说，所有等待的线程会按照顺序进行排列，如果现在使用了notify()方法的话，则会唤醒第一个等待的线程执行，而如果使用了notifyAll()方法，则会唤醒所有的等待线程，哪个线程的优先级高，哪个线程就有可能先执行。
	
	14)线程的生命周期：
		一个线程创建之后通过start()方法进入到运行状态，在运行状态中可以使用yield()进行礼让，但是仍然可以进行，
		如果一个线程需要暂停的话，可以使用suspend()、sleep()、wait(),如果现在的线程不需要再执行，则可以通过stop()结束，（如果run()方法执行完毕也表示结束）,
		或者一个新的线程直接调用stop()方法也可以进行结束。
		
		suspend()：暂时挂起线程；
		resume()：恢复挂起的线程；
		stop()：停止线程；
		以上的三个方法都会产生死锁的问题，所有现在已经不建议使用了。
		停止线程时，可以使用修改（Boolean型变量）标志位的方式。
	

泛型（Generic）：
	泛型可以解决数据类型的安全性问题，它主要的原理，是在类声明的时候，通过一个标识表示类中某个属性的类型或者是某个方法的返回值及参数类型。
	这样在类声明或实例化的时候只要指定好需要的类型即可。
	
	1.泛型类定义格式：
		【访问权限】 class 类名称<泛型类型1,泛型类型2...,泛型类型3>{
			[访问权限] 泛型类型标识    变量名称;
			[访问权限] 泛型类型标识    方法名称(){};
			[] 返回值类型声明    方法名称(泛型类型标识    变量名称){};
		}

	2.泛型对象定义：
		类名称<> 对象名称    =  new  类名称<具体类>();
		
	3。泛型的安全警告：
		在泛型的应用中最好在声明类对象的时候指定好其内部的数据类型；
		但是也可以不指定数据类型，这样一来用户在使用时，就会擦除泛型，使用Object接收，并会出现不安全的警告信息。

	4.通配符：
		？：在接收时使用，只能接收，不能修改；
		使用？可以接收任意的泛型对象；
		
		
	5.受限泛型：
		在引用传递中，泛型操作中也可以设置一个泛型对象的范围上限和范围下限。
		范围上限使用extends关键字声明，表示参数化的类型可能是所指定的类型，或者是此类型的子类，
		而范围下限使用super关键字进行声明，表示参数化的类型可能是所指定的类型，或者是此类型的父类型，直至Object类。
		
		设置上限：
			声明对象：类名称<? extends 类> 对象名称
			定义类： [访问权限] 类名称<泛型表示    extends 类>{}
			
		设置下限：
			声明对象：类名称<> 对象名称
			定义类：[访问权限] 类名称    <泛型标识    extends 类>{}

	6.泛型与子类继承的限制：
		一个类的子类可以通过对象的多态性为其父类实例化，但是在泛型操作中，子类的泛型类型是无法使用父类的泛型类型接收的。
		例如：Info<String>不能使用Info<Object>接收。

	7.泛型接口：
		在JDK1.5之后，不仅仅可以声明泛型类，也可以声明泛型接口，声明泛型接口和声明泛型类的语法类似，也是在接口名称后面加上<T>；
		如下格式所示：
			[访问权限] interface 接口名称<泛型标识>{}
		
		7.1泛型接口的两种实现方式：
			1.在子类定义上声明泛型；
			2.在子类的定义上直接指定类型；
	8.泛型方法：
		泛型方法中可以定义泛型参数，此时，参数的类型就是传入数据的类型；
		泛型方法的简单定义：
			[访问权限] <泛型标识> 泛型标识    方法名称([泛型标识     参数名称])
			如：public <T> T fun(T t){}
		
	9.泛型数组：
		使用泛型的时候，可以传递或者返回一个泛型数组；
		
	10.泛型的嵌套设置：
		在设置泛型的时候，同时指定另一个泛型类型；
					

Java常用类库：
	1.StringBuffer：在频繁修改字符串内容的时候，使用。
		StringBuffer是使用缓冲区的，本身也是操作字符串的，但是与String类不同，String类的内容一旦声明之后不可改变，
		改变的只是内存地址的指向，而StringBuffer中的内容是可以改变的。
		对于StringBuffer而言，本身是一个具体的操作类，所以不能像String那样采用直接赋值的方式进行对象的实例化，必须通过构造方法完成。
	
		1.1 StringBuffer类的常用方法：
			1.public StringBuffer append();
				与String类中的“+”类似，可以向StringBuffer中追加内容，此方法可以添加任何的数据类型；
			2.public int indexOf(String str);
				查找指定字符串是否存在；
			3.public int indexOf(String str,int fromIndex);
				从指定位置开始查找指定的字符串是否存在；
			4.public StringBuffer replace(int start,int end,String str);
				指定内容替换；
			5.public StringBuffer reverse();
				指定内容反转保存；
			6.public StringBuffer insert(int offset,String str);
				在指定位置处加上指定字符串；
			7.public int length();
				求出内容长度；
			8.public StringBuffer delete(int start,int end);
				删除指定范围的字符串；
			9.public String subString(int start);
				字符串截取，指定开始点；
			10.public String subString(int start,int end);
				截取指定范围的字符串；
			11.public String toString();
				Object类继承的方法，用于将内容变为String类型。
		
			当一个字符串的内容需要被经常改变时就要使用StringBuffer；

	2.Runtime类：
		运行时，是一个封装JVM进程的类，每一个Java程序实际上都是启动了一个JVM进程，那么每一个JVM进程都是对应一个Runtime实例，此实例是由JVM为其实例化的。
		此静态方法getRuntime()，直接返回一个Runtime类的实例；

		Runtime类的常用方法：一旦取得实例之后，以下的方法就可以使用了。
			public static Runtime getRuntime();
				取得Runtime类的实例；
			public long freeMemory();
				返回Java虚拟机中的空闲内存量；
			public long maxMemory();
				返回JVM的最大内存量；
			public void gc();
				运行垃圾回收器，释放空间；
			public Process exec(String command)throws IOException{}
				执行本机命令；
	
		2.1 Runtime类和Process类：
			除了观察内存使用之外，也可以直接使用Runtime类运行本机的可执行程序；
				public Process exec(String command)throws IOException{}
			exec()方法的返回值是Process,表示一个进程的操作类，可以通过destroy()方法毁掉一个进程。

		Runtime类本身就是单态设计的一种，因为在整个jvm中只存在一个Runtime类的对象，
		可以使用Runtime类取得jvm的系统信息，或者使用gc()方法释放掉垃圾空间，还可以使用此类运行本机的程序。

	3.国际化程序：通过国际化操作，让一个程序适合各个国家的语言要求。
		国际化操作必须通过以下三个类完成：
			java.util.Locale;
				用于表示一个国家语言类；
			java.util.ResoruceBundle;
				用于访问资源文件；
			java.text.MessageFormat;
				格式化资源文件的占位字符串；
		
		3.1 Local类：表示的是本地，实际上使用的是一个ISO编码的封装类。
		
		3.2 ResourceBundle：此类是专门完成属性文件读取操作的，
			读取的时候直接指定文件名称即可（此文件名称一般不需要指定后缀，后缀统一为*.properties）,
			可以根据Locale所指定的区域来自动选择所需要的资源文件。
			
			public static final ResourceBundle getBundle(String baseName);
				此方法就是指定要操作的资源文件；此方法找到的是默认的操作系统的语言Local对象。
			public static final ResourceBundle getBundle(String baseName,Locale locale);
				此方法也是指定操作的资源文件，并传入Locale对象。
			public final String getString(String key);
				根据key取得对应的value值；
				
		3.3 Java国际化程序实现：
			通过Jdk的bin目录中的native2ascii.exe进行转码。
			主要是中文就必须进行转码。
		
			3.3.1 处理动态文本：
				如果资源文件中的内容是动态的，就必须在资源文件中进行一些动态文本的配置，“设置占位符”，这些符号中的内容暂时不固定，
				而是在程序执行的时候由程序进行设置的，而要想实现这样的功能，则必须使用MessageForm类。此类在java.text包中定义的。
				在Format类中还存在数字格式化的Format(NumberFormat)、日期格式化的Format(DateFormat)这两个类以后会介绍。
			
				占位符使用{数字}的形式表示，如果现在表示第一个内容“{0}”、第二个内容“{1}”一次类推。
				
				在MassageFormat类中主要使用的format()方法；
					public static String format(String pattern,Object... arguments);
				
			3.3.2 java新特性：传入可变参数
					public void fun(Object... args){}
			
			3.3.3 使用一个类替换资源文件：
				所有的要显示的内容实际上都应该放在资源文件中，但是在Java中为了照顾部分习惯于使用类的用户，
				所以也可以直接使用一个类来存放所有的资源文件内容，但是，此类在操作的时候就必须有一个明显的注意点，必须继承：ListResourceBundle类。
				
				不管资源类还是资源文件，找的时候都是Message，那么最终找到时候是哪一个？
					此时需要区分优先级：
						1. Message_zh_CN.class
						2. Message_zh_CN.properties
						3. Message.properties

	4.System类：
		是系统提供好的类，与系统相关的属性和方法的集合在System类中所有的属性都是静态的。

		常用方法：
			public static void exit(int Status); 
				系统推出，如果status为非0就是表示退出；
		  *	public Static void ge();
				运行垃圾收集机制，调用的是Runtime类中的gc方法；
			public static long currentTimeMillis();
				返回以毫秒为单位的当前时间；
			public static void arraycopy(Object src,int srcPos,Object dest,int destPos,int length);
				数组拷贝操作；
			public static Properties getProperties();
				取得当前系统的全部属性；
			public static String getProperty(String key);
				根据键值取得属性的具体内容；
				
					
			垃圾回收可以自动调用也可以手工调用，手工调用的时候就是调用System.gc()或者Runtime.getRuntim().gc();
			但是，如果一个对象在回收之前需要做一些收尾的工作，则就必须覆写Object类中的finalize()方法：
				protected void finalize() throws Throwable{}
			在对象被回收之前进行调用，以处理对象回收前的若干操作，例如释放资源等。

			Java对象的生命周期：
				初始化-->对象实例化-->垃圾收集-->对象终结-->卸载
	
	5.DateFomat类：抽象类
		是一个日期的格式化类，专门格式化日期的操作。此包在java.text.*;包中
		在内部有可以为它实例化的方法：
			public static final DateFormat getDateInstance();
				得到日期的DateFormat对象；
			public static final DateFormat getDateTimeInstance();
				得到日期时间的DateFormat对象；
			
		使用DateFormat类完成Date类的转换功能：
			public final String format(Date date);

	6.SimpleDateFormat类：在Java。text;类中
		此类的功能是完成日期的显示格式化的，例如：在开发中，可能会将一种日期格式变为另外一种日期格式，如下所示：
			原始日期：2008-10-19 10:11:30.345
			转换后日期：2008年10月19日 10时11分30秒345毫秒
			
		但是以上的两个日期中日期的数字是完全一样的，唯一不同的是日期的显示格式不同，所以要想实现这样的转换功能就必须依靠SimpleDateFormat类。
			如果要想实现转换，则必须首先准备好一个模板，通过此模板进行日期数字的提取工作。

			y：表示年，年份是四位数字，所以需要使用“yyyy”表示年；
			M：表示月，月份是两位数字，所以需要使用“MM”表示；
			d：表示日，日期是两位数字，所以需要使用“dd”表示；
			H：表示时，时间是两位数字，所以需要使用“HH”表示；
			m：表示分，分钟是两位数字，所以需要使用“mm”表示；
			s：表示秒，秒数是两位数字，所以需要使用“ss”表示；
			S：表毫秒，毫秒是三位数字，所以需要使用“SSS”表示。
		
		在SimpleDateFormat类使用的时候，必须注意的是，在构造对象时要传入匹配的模板：
			构造方法：
				public SimpleDateformat(String parrern);
			转换：
				public Date parse(String source)throws ParseException{}
					此时取得的是全部的时间数
			格式化：
				public final String format(Date date);
					将时间重新格式化成字符串显示。

		***总结：
			1.DateFormat可以直接使用，但其本身是一个抽象类，可以根据Locale指定的区域不同得到不同的日期时间显示效果；
			2.SimpleDateFormat类是DateFormat类的子类，一般情况下来讲DateFormat类很少会直接使用，而都是使用SimpleDateFormat类完成。
		  **3.直接使用SimpleDateFormat类取得时间会比使用Calendar类更加方便，而且不用去增加补零操作，所以在开发中如果需要取得一个日期的话，基本上都使用SimpleDateFormat类进行操作。

	7.Math类和Random类：
		Math类：表示数学操作；
			Math类中的方法都是静态方法，直接使用“类.方法名称()”的形式调用即可
		Random类：主要功能是产生随机数；
			Random r = new Random();//实例化random对象
			r.nextInt(100);//100以内的随机数

	8.NumberFormat类：
		此类的主要功能是：数字的格式化；即可以按照本地的风格习惯记性数字的显示。此类在java.text包中。
		
		定义格式：
			public abstract class NumberFormat extends Format
		
		常用方法：
			public static Locale[] getAvailableLocales();
				返回所有语言环境的数组；
			public static final NumberFormat getInstance();
				返回当前默认语言环境的数字格式；
			public static NumberFormat getInstance(Locale inLocale);
				返回指定语言环境的数字格式；
			public static final NumberFormat getCurrencyInstance();
				返回当前默认环境的货币格式；
			public static NumberFormat getCurrencyInstance(Locale inLocale);
				返回指定语言环境的数字格式。

		注意：
			MessageFormat、DateFormat、NumberFormat是Format三个常用的子类，如果想要进一步完成一个好的国际化程序，
			则肯定需要同时使用这样三个类完成，根据不同的国家显示日期，或者显示货币的形式。
		
		8.1 DecimalFormat类：
			是NumberFormat类的子类；主要作用是用来格式化数字，要比直接使用NumberFormat更加方便，
			因为，可以直接指定按用户自定义的方式进行格式化操作，与SimpleDateFormat类似，如果想要进行
			自定义格式化操作，则必须指定格式化操作的模板。

	9.BigInteger和BigDecimal：
		操作大数：
			操作的整型数据超过了long的话，使用BigInteger：
			常用方法：
				public BigInteger(String val)
					构造方法，将一个字符串变为BigInteger类型的数值；
				public BigInteger add(BigInteger val)	
					加法；
				public BigInteger subtract(BigInteger val)
					减法；
				public BigInteger multiply(BigInteger val)
					乘法；
				public BigInteger divide(BigInteger val)
					除法；
				public BigInteger max(BigInteger val)
					返回两个大数中的最大值；
				public BigInteger min(BigInteger val)
					返回两个大数中的最小值；
				public BigInteger[] divideAndRemainder(BigInteger val)
					除法操作，数值的第一个元素为除法的商，第二个元素为除法的余数。
				
		操作小数：	
			使用此类可以完成大的小数操作，可以进行精确的四舍五入；
			常用方法：
				public BigDecimal(double val)
					构造方法，将double表示形式转换位Bigdecimal；
				public BigDecimal(int val)
					构造方法，将int表示的形式转换为BigDecimal；
				public BigDecimal(String val)
					构造方法，将字符串表示形式转换为BigDecimal；
				public BigDecimal add(BigDecimal augend)
					加法；
				public BigDecimal subtract(BigDecimal subtrahend)
					减法；
				public BigDecimal multiply(BigDecimal multiplicand)
					乘法；
				public BigDecimal divide(BigDecimal divisor)
					除法。
		
	10.对象克隆技术：
		对象的复制，完整的复制一个对象，如果想要完成对象克隆的话，则肯定依靠Object类。
		克隆方法：
			protected Object clone()throws CloneNotsupportedException
		以上的方法就是对象的克隆方法，如果一个对象被克隆，则必须在次类中明确的覆写此方法，但是此方法不能直接调用。
		Cloneable是一个接口，但是在此接口中没有任何的操作方法，所以此接口实际上属于标识接口，标识一种能力。
			
	11.Arrays类：
		是数组的操作类，定义在java。util包中，主要的功能可以实现数组元素的查找，数组内容的填充，排序等。
		常用方法：
			public static boolean equals(int[] a,int[] a2)
				判断两个数组是否相等，此方法被重载多次，可以判断各种数据类型的数组；
			public static void fill(int[] a,int val)
				将指定内容填充到数组中，此方法被重载多次，可以填充各种数据类型的数组；
			public static void sort(int[] a)
				数组排序，此方法被重载多次，可以对各种类型的数组进行排序；
			public static int binarySearch(int[] a,int key)
				对排序后的数组进行检索，此方法被重载多次，可以对各种类型的数组进行检索；
			public static String toString(int[] a)
				输出数组信息，此方法被重载多次，可以输出各种数据类型的数组。
				
	12.Comparable接口：比较器
		可以直接使用java.util.Arrays类进行数组的排序操作，但对象所在的类必须实现Comparable接口，用于指定排序接口。
		Comparable接口定义如下：
			public interface Comparable<T>{
				public int compareTo(T o);
			}
			此方法返回一个int类型的数据，但是此int的值只能是以下三种：
				1：表示大于；
				-1：表示小于；
				0：表示相等。
		排序原理：
			二叉树排序方法：同二叉树进行排序后，再利用中序遍历的方式把内容依次读取出来；
			将第一个内容作为根节点保存，之后如果后面的值比根节点打，则放在根节点的左子树，如果后面的值比根节点的值小，则放在根节点的右子树。
	
	13.Comparator接口：比较器
		如果一个类已经开发完成，但是在此类建立的初期并没有实现comparable接口，此时肯定是无法进行对象排序操作的，所有为了解决这样的问题，Java又定义了另一个比较器的操作接口：
			Comparator接口定义在Java.util包中，格式如下：
				public interface Comparator<T>{
					public int compare(T o1,T o2);
					boolean euqals(Object obj);
				}

		**总结：
			在使用中尽可能的还是使用Comparable在需要排序的类上实现好此接口，而Comparator需要单独建立一个排序的类，
			这样如果有很多的话，则排序的规则类也就会非常多，操作起来比较麻烦。
			掌握一点：只要是对象排序，则在Java中永远是以Comparable接口为准的。
			
	14.观察者设计模式：
		如果要想实现观察者模式，则必须依靠java.util包中提供的Observable和Observer接口；
		此模式时一种Java本身的机制，不使用Observa和Observer也可以实现，只是有点麻烦。

	15.正则表达式：
		1.掌握正则表达式的作用；
		2.掌握正则表达式的匹配模式；
		3.掌握Pattern类和Matcher类的使用；
		4.掌握String类对正则的支持
		
		正则表达式可以方便的对数据进行匹配，可以执行更加复杂的字符串验证、拆分、替换功能。
		
	  **Pattern类和Matcher类：
			Pattern类的主要作用是：进行正则规范（如：“[0-9]”）的编写；	
			Matcher类主要是执行规范，验证一个字符串是否符合其规范；	
		
			常用的正则规则1：
				\\			表示反斜线(\)字符	
				\t			表示制表符
				\n			表示换行
				[abc]		字符a、b或c
				[^abc]		除了a、b、c之外的任意字符
				[a-zA-Z0-9]	表示由字符、数字组成
				\d			表示数字
				\D			表示非数字（[^0-9]）
				\w			表示字母、数字、下划线
				\W			表示非字母、数字、下划线
				\s			表示所有空白字符（换行、空格等）
				\S			表示所有非空白字符
				^			行的开头
				$			行的结尾
				.			匹配除换行符之外的任意字符

			常用的正则规则2：数量表示（X表示一组规范）
				X			必须出现一次
				X?			可以出现0次或一次
				X*			可以出现0次、1次或多次
				X+			可以出现1次或多次
				X{n}		必须出现n次
				X{n,}		必须出现n次以上
				X{n,m}		必须出现n~m次
				
			常用的正则规则3：逻辑运算符（X、Y表示一组规范）
				XY			X规范后跟着Y规范
				X | Y		X规范或Y规范
				(X)			作为一个捕获组规范

			以上的正则，如果要驱动起来，必须依靠Pattern类和Matcher类。
			常用方法：
				public static Pattern compile(String regex)
					指定好操作的正则；
				public Matcher matcher(CharSequence input)
					可以为Matcher类实例化；
				public String[] split(CharSequence input)
					拆分；
			Matcher类常用方法：
				public boolean matches()
					执行验证；
				public String replaceAll(String replacement)
					字符串替换；与String类中相同；
					
			例如：验证一个字符串是否是合法的日期格式：
				日期：		1983		07			27
				格式：		四位数字		两位数字		两位数字
				正则：		\d{4}		\d{2}		\d{2}
		  
		  **String类对正则的支持：
		  		如果有时候发现一个字符串无法按照指定的字符拆分的话，则需要使用“\”转义，转义的时候两个“\”表示一个“\”.
			
			**总结：
				1.使用正则可以方便的完成字符串的验证、拆分、替换等复杂功能；
				2.在开发中一般会直接使用String类中提供好的正则支持，而往往很少直接使用Pattern类或Matcher类；
				3.在一些正则应用的时候，对于一些敏感的字符要进行转义操作。

	16.定时调度：
		定时调度：每当一段时间，程序会自动执行，称为定时调用；
				        使用定时调度，则必须保证程序始终运行着，相当于定时调度是在程序外又启动了一个新的线程。
		Timer类：
			是一种线程设施，可以用来实现在某一时间或某一段时间后，安排某一个任务执行一次，或定期重复执行。该功能要与TimerTask配合使用。
			TimerTask类用来实现由Timer安排的一次或重复执行的某一个任务。
			
			每一个Timer对象对应的是一个线程，因此计时器所执行的任务应该迅速完成，否则可能会延迟后续任务的执行，而这些后续的任务就有可能堆在一起，等到该任务完成后才能快速连续执行。
			
			常用方法：
				public Timer()
					构造，用来创建一个计时器并启动该计时器；
				public void cancel()
					用来终止该计时器，并放弃所有已安排的任务，对当前正在执行的任务没有影响；
				public int purge()
					将所有已经取消的任务移除，一般用来释放内存空间；
				public void schedule(TimerTask task,Date time)
					安排一个任务在指定的时间执行，如果已经超过该时间，则立即执行；
				public void schedule(TimerTask task,Date firstTime,long period)
					安排一个任务在指定的时间执行，之后以固定的频率（单位：毫秒）重复执行；
				public void schedule(TimerTask task,long delay)
					安排一个任务在一段时间（单位：毫秒）后执行；
				public void schedule(TimerTask task,long delay,ling period)
					安排一个任务在一段时间（单位：毫秒）后执行，之后以固定的频率（单位：毫秒）重复执行；
				public void scheduleAtFixedRate(TimerTask task,Date firstTime,long period)
					安排一个任务在指定的时间执行，之后以近似固定的频率（单位：毫秒）重复执行；
				public void scheduleAtFixedRate(TimerTask task,long delay,long period)
					安排一个任务在一段时间（单位：毫秒）后执行，之后以近似固定的频率（单位：毫秒）重复执行。

			schedule()与scheduleAtFixedRate()方法的区别：
				两者的区别在于重复执行任务时，对于时间间隔出现延迟的情况处理；
					schedule()方法的执行时间间隔永远是固定的，如果之前出现了延迟的情况，之后也会继续按照设定好的间隔来执行；
					scheduleAtFixedRate()方法可以根据出现的延迟时间自动调整下一次间隔的执行时间。
			
			如果一个Timer类要想调度程序的话，则必须使用TimerTask的子类；TimerTask类是一个抽象类，如果要使用该类，需要自己建立一个类来继承此类，并实现其中的抽象方法。
			
		TimerTask类：
			常用方法：只有run()方法必须是抽象的，其他的方法非比抽象；
				public void cancel()
					用来终止此任务，如果该任务只执行一次且还没有执行，则永远不会再执行，如果为重复执行任务，则之后不会再执行（如果任务正在执行，则执行完后不会再执行）。
				public void run()
					该任务所要执行的具体操作，该方法为引入的接口Runnable中的方法，子类需要覆写此方法；
				public long scheduledExecutionTime()
					返回最近一次要执行该任务的时间（如果正在执行，则返回此任务的执行安排时间），一般在run()方法中调用，用来判断当前是否有足够的时间来执行完成该任务。
						
		**总结：
			一般在web的开发中此内容比较有用，因为要维护一个容器不关闭才可以一直定时操作下去。

***IO：
	1.File类：
		唯一表示与文件本身有关的类就是File类，使用File类可以创建或删除文件等常用操作。
		常用构造方法：
			public File(String pathname)	
				实例化File类的时候，必须设置好路径。直接根据路径，找到文件。
		常用方法和常量：
			public static final String pathSeparator
				常量，表示路径的分隔符（windows是：“;”） ；根据操作系统自动选择
			public static final String separator
				常量，表示路径的分隔符（windows是：“\”）；根据操作系统自动选择
			public boolean createNewFile()throws IOException
				创建新文件；
			public boolean delete()
				删除文件；
			public boolean exists()
				判断文件是否存在；
			public boolean isDirectory()
				判断给定的路径是否是一个目录；
			public long length()
				返回文件的大小；
			public String[] list()
				列出指定目录的全部内容，只是列出了名称；
			public File[] listFiles()
				列出指定目录的全部内容，会列出路径；
			public boolean mkdir()
				创建一个目录；
			public boolean renameTo(File dest)				
				为已有的文件重新命名。
		
		*对于文件的后缀，是可有可无的。
		
		*list()和listFiles()的区别：
			如果现在给出了一个目录，则可以直接列出目录中的内容，但是列出的方法File类中存在两个：
				1.已字符串数组的形式返回：public String[] list()
					列出全部的名字，包括文件夹的名字或者文件的名字等；
				2.已File数组的形式返回：public File[] listFiles()
					列出的是一个完整的路径，对应程序来说容易操作；
		
	2.RandomAccessFile类：对文件的内容进行操作。
		主要功能：完成随机读取功能，可以读取指定位置的内容。

		常用方法：
			public RandomAccessFile(File file,String mode)throws FileNotFoundException
				构造，接收File类的对象，指定操作路径，但是在设置时需要设置模式，“r”：只读、“w”：只写、“rw”：读写；
			public RandomAccessFile(String name,String mode)throws FileNotFoundException
				构造，不再使用File类对象表示文件，而是直接输入了一个固定的文件路径；
			public void close()throws IOException
				关闭操作；
			public int read(byte[] b)throws IOException
				将内容读取到一个byte数组之中；
			public final byte readByte()throws IOException
				读取一个字节；
			public final int readInt()throws IOException
				从文件中读取整形数据；
			public void seek(long pos)throws IOException
				设置读指针的位置；
			public final void writeBytes(String s)throws IOException
				将一个字符串写入到文件之中，按字节的方式处理；
			public final void writeInt(int v)throws IOException
				将一个int型数据写入文件，长度为4位；
			public int skipBytes(int n)	throws IOException
				指针跳过多少个字节。

	3.字符流和字节流：
		目标：
			1.掌握流的概念；
				在程序中所有的数据都是以流的方式进行传输或保存的，程序需要数据的时候要使用输入流读取数据，而当程序需要将一些数据保存起来的时候，就要使用输出流完成。
				流中保存的实际上全都是字节文件。
			2.掌握字节流与字符流的作用；
			3.掌握文件的标准操作步骤；
			4.掌握字节与字符操作的区别。

		字节流中输出数据主要是使用OutputStream完成，输入使用的是InputStream完成；
		字符流中输出数据主要是使用Writer类完成，输入使用的Reader类完成。

		***操作流程：
			A.使用File类打开一个文件；
			B.通过字节流或字符流的子类，指定输出的位置；
			C。进行读/写操作；
			D.关闭输入/输出流。
			
		使用File类操作的时候一定要注意路径的问题，注意分隔符；
		实际上四个操作类都是抽象类。

		3.1 字节流：
			字节流主要是操作byte类型数据，以byte数据为准，主要操作类就是OutputStream字节输出流、InputStream字节输入流。

			Byte是字节，肯定使用字节流操作，所有的数据基本上都可以直接使用byte数组表示出来。

			3.1.1 OutputStream类：字节输出流(写)
				是整个io包中字节输出流的最大父类，此类的定义如下：
					public abstract class OutputStream extends Object implements Closeable, Flushable
				此类是一个抽象类，想要使用此类则必须通过子类实例化对象，那么如果现在要操作的是一个文件，则可以使用：FileOutputStream类。通过向上转型之后，可以为OutputStream类实例化。

				常用方法：
					public void close()throws IOException
						关闭输出流；
					public void flush()throws IOException
						刷新缓冲区；
					public void write(byte[] b)throws IOException
						将一个byte数组写入数据流；
					public void write(byte[],int off,int len)throws IOException
						将一个指定范围的byte数组写入数据流；
					public abstract void write(int b)throws IOException
						将一个字节数据写入数据流。
				
				3.1.1.1 FileOutputStream类：		
					要想使用以上方法，必须使用子类实例化，此时使用了子类FileOutputStream，此类的构造方法如下：
						public FileOutputStream(File file)throws FileNotFoundException
					
					**追加内容：
						之前所有的操作中，如果重新执行程序，则肯定覆盖文件中的已有的内容，那么此时可以通过FileOutputStream向文件中追加内容；
						FileOutputStream的另一个构造方法：
							public FileOutputStream(File file,boolean append)throws FileNotFoundException
						在构造方法中，如果将append的值设置为true，则表示在文件的末尾追加内容。

			3.1.2 InputStream类：字节输入流(读)
				通过InputStream从文件中吧内容读取进来；此类的定义如下：
					public abstract class InputStream extends Object implements Closeable
				与OutputStream类一样，InputStream本身也是一个抽象类，必须依靠其子类，如果现在是从文件中读取，子类肯定是FileInputStream。
				
				常用方法：
					public int available()throws IOException
						可以取得输入文件的大小；
					public void close()throws IOException
						关闭输入流；
					public abstract int read()throws IOException
						读取内容，以数字的方式读取；
					public int read(byte[] b)throws IOException
						将内容读到byte数组之中，同时返回读入的个数。
				
				3.1.2.1 FileInputStream类：
					要想使用以上方法，必须使用子类实例化，此时使用了子类FileInputStream，此类的构造方法如下：
						public FileInputStream(File file)throws FileNotFoundException
					
					*判断标志位：
						当不知道读取内容有多大的时候，使用判断内容结尾是否还有内容的方式：-1；（-1代表没有内容了，不等于-1代表还有内容）
					
		3.2字符流：
			在程序中一个字符等于2个字节，那么JAVA提供了Reader、Write两个专门操作字符流的类；
			
			3.2.1字符输出流 Write类：（写）
				Write本身是一个字符流的输出类，此类的定义如下：
					public abstract class Write extends Object implements Appendable,Closeable,Flushable
				此类本身也是一个抽象类，如果要想使用此类，则肯定要使用其子类，此时如果是向文件中写入内容，所以应该使用FileWrite的子类。
					FileWrite类的构造方法定义如下：
						public FileWrite(File file)throws IOException	
				常用方法：
					public abstract void close()throws IOException
						关闭输出流；
					public void  write(String str)throws IOException
						将字符串输出；
					public void write(char[] cbuf)throws IOException
						将字符数组输出；
					public abstract void flush()throws IOException
						强制性清空缓存。
						
					字符流操作比字节流的操作好在一点上：就是可以直接输出字符串了，不用再像之前那样进行转换操作了。

					使用字符流，依然是覆盖之前已有内容，如果想要追加，添加true。
			
			3.2.2字符输入流Reader：（读） 
				Reader是使用字符的方式从文件中取出数据，Reader类的定义如下：
					public abstract class Reader extends Object implements Readable,Closeable
				Reader本身也是抽象类，如果现在要从文件中读取内容，则可以直接使用FileReader子类。
					FileReader类 的构造方法如下：
						public FileReader(File file)throws FileNotFoundException

				常用方法：
					public abstract void close()throws IOException
						关闭输出流；
					public int read()throws IOException
						读取单个字符；
					public int read(char[] cbuf)throws IOException
						将内容读到字符数组之中，返回读入的长度；
						
		*****字节流和字符流的区别：
			字节流在操作的时候本身是不会用到缓冲区（内存）的，是与文件本身直接操作的，而字符流在操作的时候是使用到缓冲区的。
				字节流：程序-->直接操作文件
				字符流：程序-->数据先放在缓存之中，再从缓存写入文件
			在所有的硬盘上保存文件或是进行传输的时候都是以字节的方式进行的，所使用字节的操作时最多的。
	
	*重点掌握。
	*4.字节流和字符流的转换：字节-字符转换流
		OutputStreamWrite和InputStreamReader
			在整个IO包中，实际上就是分为字节流和字符流，但是除了这两个流之外，还存在了一组字节流-字符流的转换类。
		
		  4.1 OutputStreamWriter：写
			       是Write的子类，将输出的字符流变为字节流，即：将一个字符流的输出对象变为字节流的输出对象；
			  OutputStreamWriter中接收的类型是OutputStream，只要是字节输出流都可以使用字符的形式操作。
			
		  4.2 InputStreamReader：读
			       是Reader的子类，讲输入的字节流变为字符流，即：将一个字节流的输入对象变为字符流的输入对象。
			  InputStreamReader中接受的类型是InputStream，只要是字节输入流都可以使用字符的输入流操作。
		
	*5.内存操作流：ByteArrayInputstream和ByteArrayOutputStream
		之前所讲解的程序中，输出和输入都是从文件中来的，当然，也可以将输出的位置设置在内存之上。此时就要使用ByteArrayInputStream、ByteArrayOutputStream类来完成输入、输出功能了。
		ByteArrayInputstream：
			主要完成将内容写入到内存之中；
			常用方法：
				public ByteArrayInputStream(byte[] buf)
					将全部的内容写入到内存中；
				public ByteArrayInputStream(byte[] buf,int offset,int length)
					将指定范围的内容写入到内存之中。
		ByteArrayOutputStream：
			主要完成将内存中的数据输出。就是从内存中写出数据。
			常用方法：
				public ByteArrayOutputStream()
					创建对象；
				public void write(int b)
					将内容从内存中输出。
		
		内存输出流在Java开发中也是经常用到的。重点掌握。
		
	*6.管道流：
		管道流的主要作用是：可以进行两个线程间的通讯，分为管道输出流（PipedOutputStream）和管道输入流（PipedInputStream）；
		如果要想进行管道输出，则必须把输出流连接在输入流之上，在PipedOutputStream类上有如下的一个方法用于连接管道：
			public void connect(PipedInputStream snk)throws IOException
			如果要连接输入和输出，就必须使用此方法。
	
	*7.打印流：
		打印流是输出信息最方便的类，主要包含字节打印流（PrintStream），和字符打印流（PrintWriter）。
		打印流提供了非常有用的打印功能，可以打印任何的数据类型，例如：小数、整数、字符串等。

		常用方法：
			public PrintStream()throws FileNotFountException
				通过一个File对象实例化PrintStream类；
			public PrintStream(OutputStream out)
				接收OutputStream对象，实例化PrintStream类；
			public PrintStream printf(Locale l,String format,Object... args)
				根据指定的Locale进行格式化输出；
			public PrintStream printf(String format,Object... args)
				根据本地环境格式化输出；
			public void print(boolean b)
				此方法被重载很多次，输出任意数据；
			public void println(boolean b)
				此方法被重载很多次，输出任意数据后换行。

		其实，就是将FileOutputStream类的功能包装了一下。

		在JDK1.5之后，Java又对PrintStream类进行了扩充，增加了格式化的输出方式，直接使用printf()方法就可以完成操作，但是在进行格式化输出的时候需要指定其输出的数据类型。
			1.	%s	表示内容为字符串；
			2.	%d	表示内容为整数；
			3.	%f	表示内容为小数；
			4.	%c	表示内容为字符。

		*本章总结：
			PrintStream可以方便的完成输出的功能；
			在以后的输出中基本上都是使用PrintStream完成，因为比较方便；
			PrintStream属于装饰设计模式。

	*8.System类对IO的支持：
		本章目标：
			1.掌握System类对IO的三种支持；
				System.out
				System.err
				System.in
			2.掌握System.out及System.err的区别；
			3.掌握输入、输出重定向。
	
		8.1 System表示系统类，实际上Java中System类也对IO给予了一定的支持。
			System类的常量：
				public static final PrintStream.out
					对应系统标准输出，一般是显示器；
				public static final PrintStream.err
					错误信息输出；
				public static final InputStream.in
					对应着标准输入，一般是键盘。
			
			使用System.out输出的时候就是将输出的位置定义在了显示器之中。
			FileOutputStream是定位在文件里，而System.out是定位在屏幕上。
			PrintStream就是OutputStream的子类。
	
			System.out和System.err都是PrintStream的实例化对象，两者都可以输出信息，前者时将信息显示给用户看，是正常的信息显示；
			后者正好相反是不希望用户看到的，会直接在后台打印，是专门显示错误的。
			
			一般来讲，如果要想输出错误信息的时候最好不要使用System.out而是直接使用System.err。
	
			System.in实际上是一个键盘的字节输入流，其本身是InputStream类型的对象。利用此方式从键盘读取数据的。

		8.2 输入、输出重定向：
			System类也可以改变System.in的输入流来源，以及System.out和System.err两个输出流的输出位置。
			常用方法：
				public static void setOut(PrintStream out)
					重定向“标准”输出流；
				public static void setErr(PrintStream err)
					重定向“标准”错误输出流；(一般不建议重定向，不希望用户看到)
				public static void setIn(InputStream in)
					重定向“标准”输入流。
			对于重定向操作，基本上都是在System.out上使用，以把信息展现给用户观看。

	***9.BufferedReader类：
		Buffer：表示缓冲区的，之前的StringBuffer缓冲区中的内容可以更改，可以提高效率。
		如果要想接收任意长度的数据，而且避免乱码产生，就可以使用BufferReader。
		BufferedReader是从缓冲区之中读取内容，所有的输入的字节数据都将放在缓冲区之中。
		实例化格式如下：
			BufferedReader buf = null;
			buf = new BufferedReader(new InputStreamReader(System.in));
			将字符流放到缓冲区之中；
			将字节流转换为字符流。
		常用方法：
			public BufferedReader(Reader in)
				构造，接收一个Reader类的实例；
			public String readLine()throws IOException
				一次性从缓冲区中将内容全部读取进来。
		
	10.Scanner类：
		在jdk1.5之后java提供了专门的输入数据类，此类可以完成BufferedReader类的功能。
		也可以方便的对输入数据进行验证。此类放在java.util包中。
		常用方法：
			public Scanner(File source)throws FileNotFoundException
				构造，从文件中接收内容；
			public Scanner(Inputstream source)
				构造，从指定的字节输入流中接收内容；
			public boolean hasNext(Pattern pattern)
				判断输入的数据是否符合指定的正则标准；
			public boolean hasNextInt()
				判读输入的是否是整数；
			public boolean hasNextFloat()
				判断输入的是否是小数；
			public String next()
				接收内容；
			public String next(Pattern pattern)
				接收内容，进行正则验证；
			public int nextInt()
				接收数字；
			public float nextFloat()
				接收小数；
			public Scanner useDelimiter(String pattern)
				设置读取的分隔符。
	
	**11.数据操作流：
		目标：1.掌握DataOutputStream和DataInputStream的作用
			2.可以使用DataOutputStream和DataInputStream写入和读取数据。
				
		在IO包中，提供了两个与平台无关的数据操作流：
			数据输出流：DataOutputStream
			数据输入流：DataInputStream
		通常数据输出流会按照一定的格式将数据输出，再通过数据输入流按照一定的格式将数据读入。
		
		DataOutputStream类：
			是Outputstream类的子类，此类的定义如下：
				public class DataOutputStream extends FilterOutputStream implements DataOutput
			此类继承自FileOutputStream类（FilterOutputStream是OutputStream类的子类）同时实现了DataOutput接口，在DataOutput接口定义了一系列的写入各种数据的方法。

		使用DataOutputStream写入的数据，要使用DataInputStream读取。
			
		DataInputStream类：
			是InputStream类的子类，专门负责读取使用DataOutputStream输出的数据，此类的定义如下：
				public class DataInputStream extends FilterInputStream implements DataInput
			此类继承自FilterInputStream（FilterInputStream是InputStream的子类），同时实现DataInput接口，在DataInput接口中定义了一系列的读入各种数据的方法。

	12.合并流：SequenceInputStream类：
		主要功能是将两个文件的内容合并成一个文件，主要操作的是内容。
		常用方法：
			public SequenceInputStream(InputStream s1,InputStream s2)
				构造，使用两个输入流对象实例化本类对象；
			public int available()throws IOException
				返回文件大小。
	13.压缩流：
		本章目标：
			1.了解压缩流的主要作用；
			2.了解javaIO支持的三种压缩格式；
			3.掌握ZipOutputStream、ZipFile、ZipInputStream三个类的作用。
		
		ZIP文件格式的输入输出流：
			Zip是一种较为常见的压缩形式，在java中要想实现zip的压缩需要导入java.util.zip包，
			可以使用此包中的ZipFile、ZipOutputStream、ZipInputStream、ZipEntry几个类完成操作。
		
		JAR及GZIP文件格式的压缩输入、输出流：
			在java.io中，不仅可以实现ZIP压缩格式的输入、输出，也可以实现JAR及GZIP文件格式的压缩：
				JAR压缩的支持类保存在java.util.jar包中，常用类有如下几个：
					JAR压缩输出流：JarOutputStream；
					JAR压缩输入流：JarInputStream；
					JAR文件：JARFile；
					JAR实体：JAREntry
				GZIP是用于UNIX系统的文件压缩，在Linux中经常会使用到*.gz的文件，就是了GZIP格式，
				GZIP压缩的支持类保存在java.util.zip包中，常用类有如下几个：
					GZIP压缩输出流：GZIPOutputStream
					GZIP压缩输入流：GZIPInputStream

		ZipEntry类：实体；
			在每一个压缩文件中都会存在多个子文件，那么这每一个的子文件在JAVA中就使用ZipEntry表示。
			常用方法：
				public ZipEntry(String name)
					构造，创建对象并指定要创建的ZipEntry名称；
				public boolean isDirectory()
					判断此ZipEntry是否是目录；
		
		1.ZipOutputStream类：压缩文件和文件夹（完成Zip格式输出）；
			如果要想完成一个文件或文件夹的压缩，要使用ZipOutputStream类完成，此类是OutputStream类的子类。	
			常用方法：
				public ZipOutputStream(OutputStream out)
					构造，创建新的Zip输出流；
				public void putNextEntry(ZipEntry e)throws IOException
					设置每一个ZipEntry对象；
				public void setComment(String comment)
					设置Zip文件的注释。
					
			*在压缩文件中每一个压缩的内容都可以用一个ZipEntry表示，所以在进行压缩之前必须通过putNextEntry设置一个ZipEntry即可。

			*压缩文件夹：	
				在实现的时候应该列出文件夹中的全部内容，并把每一个内容设置成ZipEntry的对象，保存到文件之中。

		2.ZipFile类：解压缩文件；
			是一个专门表示压缩文件的类；在java中，每一个压缩文件都可以使用ZipFile表示，
			还可以使用ZipFile根据压缩后的文件名称找到每一个压缩文件中的ZipEntry并将其进行解压缩操作。
			常用方法：
				public ZipFile()throws ZipExceptionIOException
					构造，根据File类实例化ZipFile对象；
				public ZipEntry getEntry(String name)
					根据名称找到其对应的ZipEntry；
				public InputStream getInputStream(ZipEntry entry)throws IOException
					根据ZipEntry取得InputStream实例；
				public String getName()
					得到压缩文件的路径名称。
			
			ZipFile类在实例化的时候必须接收File类实例，File类实例指向的是一个压缩的*zip文件。
			
		3.ZipInputStream类：解压缩文件夹；
			结合ZipFile类就可以完成压缩文件夹的功能；
			ZipFile对象可以找到每一个ZipEntry的输入流。但是ZipInputStream并不能得到每一个输入流，所以需要使用ZipFile，
			但是ZipInputStream在取得每一个ZipEntry的时候，不需要每一个ZipEntry的名称。

		小结：
			1.压缩文件中的每一个压缩实体都使用ZipEntry保存，一个压缩文件中可能包含一个或多个的ZipEntry对象；
			2.在java中可以进行zip、jar、gz三种格式的压缩支持，操作流程基本上一样；
			3.ZipOutputStream可以进行压缩的输出，但是输出的位置不一定是文件所在的位置；
			4.ZipFile表示每一个压缩文件，可以得到每一个压缩实体的输入流；
			5.ZipInputStream可以得到每一个实体，但是却无法得到每一个实体的输入流。

	14.回退流：PushBackInputStream类：
		在JavaIO中所有的数据都是采用顺序的读取方式，即：对于一个输入流来讲都是采用从头到尾顺序读取的，如果在输入流中某个不需要的内容被读取进来，则只能通过程序将这些不需要内容处理掉，
		为了解决这样的问题，在Java中提供了一种回退输入流（PushbackInputStream、PushbackReader），可以把读取进来的某些数据重新退回输入流的缓冲区之中。
		常用方法：
			public void unread(int b) 
          		推回一个字节：将其复制到推回缓冲区之前。
			public void unread(byte[] b, int off, int len) 
        		  推回 byte 数组的某一部分：将其复制到推回缓冲区之前。
        	public void unread(byte[] b) 
          		推回一个 byte 数组：将其复制到推回缓冲区之前。
      		public long skip(long n) 
       			   从此输入流中跳过并丢弃 n 个数据字节。
       		pubic int read() 
        		  从此输入流中读取下一个数据字节。 
 			public int read(byte[] b, int off, int len) 
         		 从此输入流将最多 len 个数据字节读入 byte 数组。 
          
	15.字符编码：
		*Java中常见的几种编码：ISO8859-1、GBK/GB2312、Unicode、UTF；
			ISO8859-1编码：
				属于单字节编码，最多只能表示0~255的字符范围，主要在英文上应用；
			GBK/GB2312编码：
				中文的国标编码，专门用来表示汉字，是双字节编码；
			Unicode编码：
				Java中就是使用此编码方式，也是最标准的一种编码，是使用16进制表示的编码。但此编码不兼容ISO8859-1编码。
			UTF编码：
				由于Unicode不支持ISO8859-1编码，而且容易占用更多的空间，而且对于英文字母也需要使用两个字节编码，这样使用Unicode不便于传输和存储，因此产生了UTF编码，UTF编码兼容了ISO8859-1编码，
				同时也可以用来表示所有的语言字符，不过UTF编码是不定长编码，每一个字符的长度从1~6个字节不等，一般在中文网页中使用此编码，因为这样可以节省空间。
				
		*得到本机的编码显示：使用System类可以取得与系统相关的信息，那么直接使用此类就可以找到系统的默认编码，使用如下方法：
			public static Properties getProperty()



















	