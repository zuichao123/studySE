一、XML
	学习目的：
		1.能用XML描述现实中的有层次关系的数据；
		2.能使用程序读取到XML中表示的数据（解析Parser）；

		XML是指可扩展标记语言（eXtensible Markup Language）用户自定义的标签；相对于HTML来讲的；
		XML被设计的宗旨是表示数据；HTML是用来显示数据的；目前经常使用的版本是1.0；
		XML是一种通用的数据交换格式；
		XML除了表示数据外，在实际的企业开发中主要用XML作为程序的配置文件；

	1.一个XML文件一般由以下几部分组成：
		1.声明文档；
			用于标识该文档是一个XML文档；
			声明必须出现在文档的第一行；
			最简单的声明：
				<?xml version='1.0' encoding='UTF-8'? standalone='yes'>
			用standalone属性说明文档是单独存在的，不需要依赖其它文件；
		2.元素；
			结束标签不能省略；
			一个XML文档必须且只能有一个根标签；
			XML文档中不会忽略回车和换行及空格；
			标签的命名规范：元素（标签）的名称可以包含字母、数字、减号、下划线和英文句点；
				严格区分大小写；
				只能以字母和下划线开头；
				不能以xml开头（W3C保留日后使用）；
				名称字符之间不能有空格或制表符；
				名称字符之间不能使用冒号（有特殊用途）；
		3.元素的属性；
			元素的属性取值一定要使用引号引起来（单引号或双引号）；
			元素的属性是不能重复的；	
		4.注释；
			与HTML中一致；不能嵌套；
				<!--这是注释-->
		5.CDATA区；
			是Character Data的缩写；
			把标签当做普通文本；
			语法：<![CDATA[
					文本内容；
				]]>
		6.特殊字符；
			&	&amp;
			<	&lt;
			>	&gt;
			"	&quot;
			'	&apos;
		7.处理指令（PI：Processing Instruction）；
			简称PI；
			用来指挥软件如何解析xml文档；
			必须以<?作为开头，以?>作为结尾；
			常用处理指令：
				xml声明：<?xml version='1.0' encoding='GB2312'?>
				xml-stylesheet指令：
					作用：指示xml文档所使用的CSS样式XSL；
						<?xml-stylesheet type='text/css' href='xx.css'?>
						注意：对中文命名的标签元素不起作用；
						
	2.DTD概述：xml约束；
		1.格式良好的xml文档，符合xml语法的；
		2.有效的xml文档，遵循约束规范的；
		格式良好的不一定是有效的，但有效的必定格式良好；
		
	3.DTD的基本语法：
		1.DTD: Document Type Definition
		2.作用：约束xml的书写规范；
		3.DTD文件保存到磁盘时，必须使用UTF-8编码；
		
	4.如何引入外部的DTD文档来约束当前的xml文档：
		DTD文件在本地：
			<!DOCTYPE 根元素名称    SYSTEM "DTD文件的路径">
		DTD文件在网络上：
			<!DOCTYPE 根元素名称    PUBLIC "DTD名称" "DTD的路径URL">						
						
	5.DTD的语法细节：
		5.1定义元素：
			语法：<@ELEMENT 元素名称	 使用规则>
			使用规则：
				（#PCDATA）：指示元素的主体内容只能是普通的文本.(Parsed Character Data)
				EMPTY：指示元素的不能有主体内容；
				ANY：用于指示元素的主体内容为任意类型；			
				（子元素）：指示元素中包含的子元素；
					如果子元素用逗号分开，说明必须按钮声明顺序去编写XML文档；		
					如果子元素用“|”分开，说明任选其一；
					用+、*、？来表示元素出现的次数；
						如果元素后面没有+*？表示：必须且只能出现一次；
						+表示至少出现一次，一次或多次；
						*表示可有可无，零次、一次或多次；
						？表示可以有可以无，有的话只能有一次，零次或一次；
						如：<!ELEMENT MYFILE((TITLE*,AUTHOR?,EMAIL)*|COMMENT)>
						声明一个元素MYFILE:	(TITLE*,AUTHOR?,EMAIL)可以有零次或没有；
										三个因为由逗号隔开，必须按顺序来；
										title可以有多次获没有；
										author可以有零次或一次；
										Email必须有；
		
		5.2定义元素的属性（attribute）：
			语法：<!ATTLIST 哪个元素的属性
				属性名1     属性值类型     设置说明
				属性名2     属性值类型     设置说明
				>
				例如：
					<!ATTLIST 商品
						类别    CDATA #REQUIRED
						颜色    CDATA #IMPLIED
					>
				对应的xml为：<商品    类别="服装" 颜色="黄色"/>
					
			属性值类型：
				CDATA：说明该属性的取值为一个普通的文本；
				
			设置说明：
				#REQUIRED:表示该属性必须出现；
				#IMPLIED：说明该属性可有可无；	
				#FIXED：表示属性的取值为一个固定值，语法：#FIXED "固定值"；
				直接值：表示属性的取值为该默认值；
		
		5.3定义实体：
			关键字	ENTITY；
				概念：在DTD中定义，在XML中使用；
				语法：<!ENTITY 实体名称“实体内容”>
				引用方式（注意是在xml中使用）：&实体名称;
				DTD定义：
					<!ENTITY copyright "传智播客版权所有">
				XML中引用：
					&copyright;
				
				概念：在DTD中定义，在DTD中使用；
				语法：<!ENTITY % 实体名称    "实体内容">
				引用方式（注意是在DTD中使用）：%实体名称;
				DTD中定义：
					<!ENTITY % TAG_NAMES "姓名|EMAIL|电话|地址">
				DTD中引用：
					<!ELEMENT 个人信息(%TAG_NAMES|生日)>
					<!ELEMENT 客户信息(%TAG_NAMES|公司名)>
					
	6.XML的解析方式：
		6.1DOM方式：
			DOM：Document Object Model，文档对象模型，这种方式是W3C推荐的处理XML的一种方式；
		
		6.2SAX方式：
			SAX：Simple API for XML，这种方式不是官方标准，属于开源社区XML-DEV，几乎所有的XML解析器都支持它；				
				只能进行查询操作，节省内存；	
		
		6.3常用解析开发包：
			JAXP：sun公司推出的实现，能进行DOM和SAX进行解析；它的API都在JavaSE中；
				 它由一下几个包及其子包组成：
				 	org.w3c.dom：提供DOM方式解析XML的标准接口；
				 	org.xml.sax：提供SAX方式解析XML的标准接口；
				 	javax.xml：提供了解析XML文档的类；
				javax.xml.parsers包中，定义了几个工厂类，我们可以通过调用这些工厂类，得到对XML文档解析的DOM和SAX解析器对象；
					DocumentBuilderFactory
					SAXParserFactory 	
		
		6.4更新XML文档：
			javax.xml.transform包中的Transformer类用于把代表XML文件的Document对象转换为某种格式后，进行输出；
				例如把XML文件应用样式表转成一个HTML文档；		
				当然也可以把Document对象又重新写回到XML文件中；
						
						
						
						
						
						
						
						
						
						
						