一、XML
	学习目的：
		1.能用XML描述现实中的有层次关系的数据；
		2.能使用程序读取到XML中表示的数据（解析Parser）；

		XML是指可扩展标记语言（eXtensible Markup Language）用户自定义的标签；相对于HTML来讲的；
		XML被设计的宗旨是表示数据；HTML是用来显示数据的；目前经常使用的版本是1.0；
		XML是一种通用的数据交换格式；
		XML除了表示数据外，在实际的企业开发中主要用XML作为程序的配置文件；

	1.一个XML文件一般由以下几部分组成：
		1.声明文档；
			用于标识该文档是一个XML文档；
			声明必须出现在文档的第一行；
			最简单的声明：
				<?xml version='1.0' encoding='UTF-8'? standalone='yes'>
			用standalone属性说明文档是单独存在的，不需要依赖其它文件；
		2.元素；
			结束标签不能省略；
			一个XML文档必须且只能有一个根标签；
			XML文档中不会忽略回车和换行及空格；
			标签的命名规范：元素（标签）的名称可以包含字母、数字、减号、下划线和英文句点；
				严格区分大小写；
				只能以字母和下划线开头；
				不能以xml开头（W3C保留日后使用）；
				名称字符之间不能有空格或制表符；
				名称字符之间不能使用冒号（有特殊用途）；
		3.元素的属性；
			元素的属性取值一定要使用引号引起来（单引号或双引号）；
			元素的属性是不能重复的；	
		4.注释；
			与HTML中一致；不能嵌套；
				<!--这是注释-->
		5.CDATA区；
			是Character Data的缩写；
			把标签当做普通文本；
			语法：<![CDATA[
					文本内容；
				]]>
		6.特殊字符；
			&	&amp;
			<	&lt;
			>	&gt;
			"	&quot;
			'	&apos;
		7.处理指令（PI：Processing Instruction）；
			简称PI；
			用来指挥软件如何解析xml文档；
			必须以<?作为开头，以?>作为结尾；
			常用处理指令：
				xml声明：<?xml version='1.0' encoding='GB2312'?>
				xml-stylesheet指令：
					作用：指示xml文档所使用的CSS样式XSL；
						<?xml-stylesheet type='text/css' href='xx.css'?>
						注意：对中文命名的标签元素不起作用；
						
	2.DTD概述：xml约束；
		1.格式良好的xml文档，符合xml语法的；
		2.有效的xml文档，遵循约束规范的；
		格式良好的不一定是有效的，但有效的必定格式良好；
		
	3.DTD的基本语法：
		1.DTD: Document Type Definition
		2.作用：约束xml的书写规范；
		3.DTD文件保存到磁盘时，必须使用UTF-8编码；
		
	4.如何引入外部的DTD文档来约束当前的xml文档：
		DTD文件在本地：
			<!DOCTYPE 根元素名称    SYSTEM "DTD文件的路径">
		DTD文件在网络上：
			<!DOCTYPE 根元素名称    PUBLIC "DTD名称" "DTD的路径URL">						
						
	5.DTD的语法细节：
		5.1定义元素：
			语法：<@ELEMENT 元素名称	 使用规则>
			使用规则：
				（#PCDATA）：指示元素的主体内容只能是普通的文本.(Parsed Character Data)
				EMPTY：指示元素的不能有主体内容；
				ANY：用于指示元素的主体内容为任意类型；			
				（子元素）：指示元素中包含的子元素；
					如果子元素用逗号分开，说明必须按钮声明顺序去编写XML文档；		
					如果子元素用“|”分开，说明任选其一；
					用+、*、？来表示元素出现的次数；
						如果元素后面没有+*？表示：必须且只能出现一次；
						+表示至少出现一次，一次或多次；
						*表示可有可无，零次、一次或多次；
						？表示可以有可以无，有的话只能有一次，零次或一次；
						如：<!ELEMENT MYFILE((TITLE*,AUTHOR?,EMAIL)*|COMMENT)>
						声明一个元素MYFILE:	(TITLE*,AUTHOR?,EMAIL)可以有零次或没有；
										三个因为由逗号隔开，必须按顺序来；
										title可以有多次获没有；
										author可以有零次或一次；
										Email必须有；
		
		5.2定义元素的属性（attribute）：
			语法：<!ATTLIST 哪个元素的属性
				属性名1     属性值类型     设置说明
				属性名2     属性值类型     设置说明
				>
				例如：
					<!ATTLIST 商品
						类别    CDATA #REQUIRED
						颜色    CDATA #IMPLIED
					>
				对应的xml为：<商品    类别="服装" 颜色="黄色"/>
					
			属性值类型：
				CDATA：说明该属性的取值为一个普通的文本；
				
			设置说明：
				#REQUIRED:表示该属性必须出现；
				#IMPLIED：说明该属性可有可无；	
				#FIXED：表示属性的取值为一个固定值，语法：#FIXED "固定值"；
				直接值：表示属性的取值为该默认值；
		
		5.3定义实体：
			关键字	ENTITY；
				概念：在DTD中定义，在XML中使用；
				语法：<!ENTITY 实体名称“实体内容”>
				引用方式（注意是在xml中使用）：&实体名称;
				DTD定义：
					<!ENTITY copyright "传智播客版权所有">
				XML中引用：
					&copyright;
				
				概念：在DTD中定义，在DTD中使用；
				语法：<!ENTITY % 实体名称    "实体内容">
				引用方式（注意是在DTD中使用）：%实体名称;
				DTD中定义：
					<!ENTITY % TAG_NAMES "姓名|EMAIL|电话|地址">
				DTD中引用：
					<!ELEMENT 个人信息(%TAG_NAMES|生日)>
					<!ELEMENT 客户信息(%TAG_NAMES|公司名)>
					
	6.XML的解析方式：
		6.1DOM方式：
			DOM：Document Object Model，文档对象模型，这种方式是W3C推荐的处理XML的一种方式；
		
			常用解析开发包：
				JAXP：sun公司推出的实现，能进行DOM和SAX进行解析；它的API都在JavaSE中；
					 它由一下几个包及其子包组成：
					 	org.w3c.dom：提供DOM方式解析XML的标准接口；
					 	org.xml.sax：提供SAX方式解析XML的标准接口；
					 	javax.xml：提供了解析XML文档的类；
					javax.xml.parsers包中，定义了几个工厂类，我们可以通过调用这些工厂类，得到对XML文档解析的DOM和SAX解析器对象；
						DocumentBuilderFactory
						SAXParserFactory 	
			
			更新XML文档：
				javax.xml.transform包中的Transformer类用于把代表XML文件的Document对象转换为某种格式后，进行输出；
					例如把XML文件应用样式表转成一个HTML文档；		
					当然也可以把Document对象又重新写回到XML文件中；
						
		6.2SAX方式：
			解析原理：
				通过读取器读取XML文档，当读到了文档的某一部分时（文档的开始、元素的开始、文本、元素的结束、文档的结束），
				都会调用事件处理器的对应方法，读到的数据，以参数的形式传递给对应的方法；
				
			SAX：Simple API for XML，这种方式不是官方标准，属于开源社区XML-DEV，几乎所有的XML解析器都支持它；				
				只能进行查询操作，节省内存；	
			SAX解析：
				在使用DOM解析XML文档时，需要读取整个XML文档，在内存中构架代表整个DOM树的Document对象，从而在对
				XML文档进行操作，此种情况下，如果XML文档特别大，就会消耗计算机的大量内存，并且容易导致内存溢出；
				
				SAX解析允许在读取文档的时候，即对文档进行处理，而不必等到整个文档装载完后才会对文档进行操作；
				SAX采用20180614074838处理掉方式解析XML文件，利用SAX解析XML文档，涉及啷个部分：
					解析器和事件处理器；
					解析器可以使用JAXP的API创建，创建出SAX解析器后，就可以指定解析器去解析某个XML文档；
					解析器采用SAX方式在解析某个XML文档时，他只要解析到？XML文档的一个组成部分，都回去调用事件处理器的一个方法，解析器在调用事件处理器的方法时，
					会把当前解析到的XML文件内容作为方法的参数传递给事件处理器；
					事件处理器有程序员编写，程序员通过事件处理器中方法的参数，就可以很轻松得到SAX解析器解析到的数据，从而可以决定如果对数据进行处理；
			
		6.3DOM4J解析XML文档：
			DOM4J是一个简单、灵活的开放源代码的库，DOM4j是由早期开发JDOM的人分离出来而后独立开发的。与JDOM不同的是，dom4j使用接口和抽象基类，虽然DOM4j的API相对要复杂一些，但它提供了比JDOM更好的灵活性。
			DOM4j是一个非常优秀的java XML API，具有性能优异、功能强大和极易使用的特点。现在很多软件采用的DOM4j，例如：Hibernate，包括sun公司自己的JAXM也使用了DOM4j；
			使用DOM4j开发，需下载相应的jar文件；
		
					
	7.XML Schema：xsd
		是一种用于定义和描述XML文档结构与尼尔的模式语言，其出现是为了克服DTD的局限性；
		XML Schema VS DTD：
			XMLSchema符合XML语法结构；
			DOM、SAX等XMLAPI很容易解析出XML Schema文档中的内容；
			XML Schema对名称空间支持得更好；
			XML Schema比XML DTD支持更多的数据类型，支持用户自定义新的数据类型；
			XML Schema定义约束的能力非常强大，可以对XML实例文档作出细致的语义限制；
			XML Schema不能像DTD一样定义实体，比DTD更复杂，但XML Schema现在已是w3c组织的标准，它证逐步取代DTD；
			
			必须有一个根节点名称为：schema；
			编写了一个XML Schema约束文档后，通常需要把这个文件中声明的元素绑定到一个URI地址上，在XML Schema技术中有一个专业术语来描述这个过程，
			即：把XML Schema文档声明的元素绑定到一个名称空间上，以后XML文件就可以通过这个URI（即名称空间）来告诉解析引擎，xml文档中编写的元素来自哪里，被谁约束；			
		
		1、Schema约束文档本身就是一个XML文档，扩展名为xsd
		2、重点：根据Schema写出XML文档
		难点：XML文档的根元素怎么写？
		
			a、首先看Schema文档，找到根元素
			<?xml version="1.0" encoding="UTF-8"?>
			<书架></书架>
			b、思考：书架来自于哪个名称空间？看Schema文档，targetNamespace就是名称空间。
			用xmlns关键字(xmlns名称空间声明)来声明我的元素来自哪个名称空间（xmlns：xml namespace）
			
			<?xml version="1.0" encoding="UTF-8"?>
			<itcast:书架  xmlns:itcast="http://www.itcast.cn"></itcast:书架>
			
			c、思考：名称空间与哪个xsd文件对应呢？使用schemaLocation关键字来关联名称空间和xsd的对应关系
			
			<?xml version="1.0" encoding="UTF-8"?>
			<itcast:书架  xmlns:itcast="http://www.itcast.cn" 
						schemaLocation="http://www.itcast.cn book.xsd"></itcast:书架>
			
			d、schemaLocation来自哪里？来自一个标准的名称空间（http://www.w3.org/2001/XMLSchema-instance）
			<?xml version="1.0" encoding="UTF-8"?>
			<itcast:书架  xmlns:itcast="http://www.itcast.cn" 
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				xsi:schemaLocation="http://www.itcast.cn book.xsd"></itcast:书架>
		一、泛型
		只给编译器用的。编译完后字节码中没有泛型的。
		泛型：如果等号左右都用到了泛型，必须类型一致。
		ArrayList<Object> list = new ArrayList<String>();错误的
		
		只有一边使用泛型，另一边不使用泛型是可以的。
		
		只有引用类型才能作为泛型方法的实际参数
		二、Web开发的基本概念
		服务器上的WEB资源：
		静态资源：基本不变的。比如html、css、js
		动态资源：根据不同环境而不同，动的。动态资源生成静态资源。比如：JSP、ASP
		
		三、Web开发需要的服务器
		JavaEE:是13种技术的总称。Servlet/JSP属于JavaEE技术的一种
		常用的服务器：
		WebLogic:支持JavaEE规范。称之为JavaEE容器：即实现了什么规范的服务器就叫做什么容器。属于重量级服务器。
		WebSphereAS（Application Server）：支持JavaEE规范
		JbossAS：支持JavaEE规范。免费
		Tomcat：支持Servlet/JSP规范。轻量级服务器。
		
		Java相关规范（接口和抽象类）都是SUN制定
		
		
		四、Tomcat的安装与启动遇到的问题(目标：TOmcat能启动)
		1、注意：不要把Tocmat装到有中文或空格的目录中。
		2、验证Tomcat是否成功
			a、进入Tomcat\bin，执行startup.bat
			b、启动过程中没有出错。最好还要打开浏览器：http://localhost:8080看到猫说明OK
			
		3、启动Tomcat遇到的问题：
			***a、无法启动：配置系统环境变量JAVA_HOME=你的JDK的安装目录
			
			Tips:
				HTTP协议规定，Web应用的默认端口是80
				把Tomcat使用的默认端口8080改为Web应用的默认端口80？
				
				在TOmcat\conf目录中有一个server.xml
				找到8080改为80，就可以使用默认端口了。
		4、Catalina_home=Tomcat的安装目录（不建议使用）
			
		五、Tomcat的目录结构（服务器厂商自定义的）
		CATALINA_HOME：
			*bin:运行Tomcat的相关命令
			*conf：Tomcat的配置信息所在
			*lib：Tomcat运行需要的jar包
			*logs:TOmcat的运行日志
			temp：存放临时文件的
			*webapps:Web应用的存放目录。该目录中的每个目录都代表一个应用。
			work：Tomcat的工作目录
			
		*****六、JavaWeb应用的目录结构（SUN制定的，有严格要求）必须记住
		Tomcat：打war包：
			jar -cvf xxx.war .
		
		MyApp:(目录，应用的名称)
			1.html
			css
				a.css
			WEB-INF:此目录必须有，且大小必须完全一致。该目录中的资源，用户无法直接访问到。（非常重要）
				classes:存放Java类的字节码
				lib:存放本应用需要的jar包
				web.xml:本应用的配置文件
		
		***七、如何“部署”自己的应用到Tomcat中
		方式一：把你的应用拷贝到Tomcat\webapps目录下。
		方式二：把自己的应用打包成war包，再拷贝到Tomcat\webapps目录下
			进入你的应用目录
			执行：jar -cvf MyApp.war .
			
		八、Tomcat组成部分详解：
			虚拟目录：
				方式一：（不建议使用，原因就是需要重新启动）
					1、修改Tomcat\conf\server.xml，找到<Host name="localhost"/>元素
					2、在其中增加一个子元素，内容如下：
						<Context path="/haha" docBase="E:\MyApp"/>
						path:虚拟目录的名称。给用户来访问的
						docBase:实际应用的存放目录
					3、重新启动Tomcat
					4、访问资源：http://localhost:8080/haha/1.html就是访问E盘下MyApp目录中的1.html
				**方式二：
					在Tomcat\conf\[enginename]\[hostname]目录下建立一个特殊的文件，文件扩展名为xml；
					文件的主文件名就是映射的虚拟路径（即<Context path="/haha" docBase="E:\MyApp"/>中的path）
					增加以下内容：
					<?xml version="1.0"?>
					<Context docBase="E:\MyApp"/>
					
				练习：配置E盘上的MyApp作为默认应用
				1、在Tomcat\conf\[enginename]\[hostname]目录下建立一个特殊的文件，文件名ROOT.xml；
				2、由于默认应用特殊，也需要重新启动Tomcat
				访问MyApp下的1.html
				http://locahost:8080/1.html
				
				
			虚拟主机：
				
			连接器:
				
		
		（作业）案例:默认端口\默认应用\默认主页
		默认端口：
		默认应用：
		默认主页：
			修改应用中的web.xml文件
			根元素下增加以下内容：
				   <welcome-file-list>
					<welcome-file>1.html</welcome-file>
				</welcome-file-list>



						
						
						
						
						
						
						
						