集合类的由来：
	对象用于封装特有数据，对象多了需要存储，如果对象的个数不确定，就使用集合容器进行存储。

集合特点：
	1.用于存储对象的容器；
	2.集合的长度是可变的；
	3.集合中不可以存储基本数据类型值；
	
集合容器因为内部的数据结构不同，有多种具体容器。不断的向上抽取，就形成了集合框架。

框架的顶层Collection接口：
Collection的常见方法：
	1.添加：
		boolean add(E e);
		boolean addAll(Collection coll);
	
	2.删除：
		boolean remove(Object o);//删除一个
		boolean removeAll(Collection coll);//删除一堆
		void clear();//清空集合中的所有元素
	3.判断：
		boolean contains(Object obj);
		boolean containsAll(Collection coll);
		boolean isEmpty();//判断集合中是否有元素
		
	4.获取：
		int size();
		iterator();//取出元素的方式：迭代器
		该对象必须依赖于具体容器，因为每一个容器的数据结构都不同；
		所以该迭代器对象是在容器中进行内部实现的；
		对于使用容器着而言，具体的实现不重要，只要通过容器获取到该实现的迭代器对象即可；
		也就是iterator方法。
		
		Iterator接口就是对所有的Collection容器进行元素取出的公共接口。
	
	5.其他：
		boolean retainAll(Collection coll);//取交集
		Object[] toArray();//将集合转成数组
		
		
//*****************************************************

Colleciton
  |--List:有序（存入和取出的顺序一致），元素都有索引（角标），元素可以重复
  |--Set:元素不能重复、无序。
  
List:特有的常见方法：有一个共性特点就是都可以操作角标。

1.添加：
	void add(index, element);
	void addAll(index, collection);
2.删除：
	Object remove(index);
	
3.修改：
	Object set(index, element);

4.获取（查）：
	Object get(index);
	int indexOf(Object);
	int LastIndexOf(Object);
	List subList(from, to); //从from到to，包含from不包含to
  
List集合是可以完成对元素的增删改查。


List：
	|--Vector：内部是数组数据结构。是同步的。增删、查询都很慢。
	|--ArrayList：内部是数组数据结构，是不同步的。替代了Vector.查询元素的速度快。
	|--LinkedList：内部是链表数据结构，是不同步的。增删元素的速度非常快。
	

LinkedList:
	addFirst();
	addLast();
	jdk1.6
	offerFirst();
	offerLast();
	
	getFirst();//获取但不移除，如果链表为空，则抛出NoSuchElementException
	getLast();	
	jdk1.6
	peekFirst();//获取但不移除，如果链表为空，返回null。
	peekLast();
	
	removeFirst();//获取并移除，如果链表为空，则抛出NoSuchElementException
	removeLast();
	jdk1.6
	pollFirst();//获取并移除，如果链表为空，返回null。
	pollLast();
	
	
	
//----------------------------------------------------

Set:元素不能重复、无序。
	set接口中的方法与collection一致。
	|--HastSet:内部数据结构是哈希表，是不同步的。
		如何保证该集合的元素唯一性呢？
			是通过对象的hashCode和equals方法来完成对象唯一性的。
			如果对象的hashCode值不同，那么不用判断equals方法，就直接存储到哈希表中。
			如果对象的hashCode值相同，那么要再次判断对象的equals方法是否为true。
			如果为true，视为相同元素，不存；如果为false，那么视为不同元素，就进行存储。
			
		记住：如果元素要存储到HashSet集合中，必须覆盖hashCode方法和equals方法。
		一般情况下，如果定义的类会产生很多对象，比如人、学生、书，通常都需要覆盖equals、hashCode方法。
		建立对象判断是否相同的依据。
	
	
	
	
	|--TreeSet:可以对集合中的元素进行排序。是不同步的。
		判断元素唯一性的方式：就是根据比较方法的返回结果是否是0，是0，就是元素相同，不存；
		
		TreeSet集合排序方式一：对元素进行排序
			让元素自身具备比较功能，就需要实现Comparable接口；覆盖compareTo方法。
			
			如果不要按照对象中具备的自然顺序进行排序。如果对象中不具备自然顺序，怎么办？
			可以使用TreeSet集合的第二种排序方式实现。
		
		TreeSet集合排序方式二：比较器
			让集合自身具备比较功能，定义一个类实现Comparator接口，覆盖compare方法。
			将该类的对象作为参数传递给TreeSet集合的构造函数。
	
哈希表确定元素是否相同：
	1.判断的是两个元素的哈希值是否相同；如果相同，再判断两个对象的内容是否相同。
	2.判断哈希值相同，其实判断的是对象的hashCode方法；判断内容相同，用的是equals方法。
  注意：如果哈希值不同，是不需要判断equals的。
  
HastSet集合数据结构是哈希表，所有存储元素的时候，使用元素的hashCode方法来确定位置，如果位置相同，再使用元素的equals方法判断内容是否相同。

如何记录每一个容器的结构和所属体系呢？
看名字！ 

List
	|--ArrayList
	|--LinkedList

Set
	|--HashSet
	|--TreeSet
	
后缀名就是该集合所属的体系；
前缀名就是该集合的数据结构；

看到array：就要想到数组，就要想到查询快，有角标；
看到link：就要想到链表，就要想到增删快，就要想到add get remove+first last的方法；
看到hash：就要想到哈希表，就要想到唯一性，就要想到元素需要覆盖hashCode方法和equals方法；
看到tree：就要想到二叉树，就要想到排序，就要想到两个接口Comparable，Comparator；

而且通常这些常用的集合容器都是不同步的。

在JDK1.5后，使用泛型来接收类中要操作的引用数据类型。
泛型类：什么时候用？当类中的操作的引用数据类型不确定的时候，就使用泛型来表示。
泛型定义在方法上；
当方法静态时，不能访问类上定义的泛型；如果静态方法要使用泛型时，只能将泛型定义在方法上。
泛型声明时放在返回类型的前边、修饰符的后边。

泛型：JDK1.5出现的安全机制。
	好处：1.将运行时期的问题ClassCastException转到了编译时期。
		2.避免了强制转换的麻烦。
	<>：什么时候用？ 当操作的引用数据类型不确定的时候，就使用<>，将要操作的引用数据类型传入即可。
		其实，<>就是一个用于接收具体引用数据类型的参数范围。
	在程序中，只要用到了带有<>的类或者接口，就要明确传入的具体引用数据类型。
	
	泛型技术是给编译器使用的技术，用于编译时期，确保了类型的安全。
	
	运行时，会将泛型去掉，生成的class文件中是不带泛型的，这个称为泛型的擦除。
	为什么擦除呢？因为为了兼容运行的类加载器。 
	
	泛型的补偿：在运行时，通过获取元素的类型进行转换动作，不用使用中强制转换了。
	
	泛型的通配符：？ 未知类型。
	
	泛型限定：？ extends E：接收E类型或者E的子类型对象，上限！
					  一般在存储元素时，使用上限，因为这样取出都是按照上限类型来运算的，不会出现类型安全隐患。
		        ？ super E：接收E类型或者E的父类型，下限！
		        	一般在取出元素时，使用下限。
		        
		        
--=======================================

集合使用的一些技巧：5

需要唯一吗？
	需要：Set
		需要制定顺序吗？
			需要：TreeSet
			不需要：HashSet
			但是想要一个和存储一致的顺序（有序）：LinkedHashSet
	不需要：List
		需要频繁增删吗？
			需要：LinkedList
			不需要：ArrayList

Collections  Arrays：集合框架的工具类。里边的方法都是静态的。
重点：<<数组转成集合>>
	使用的是Arrays中的asList方法。List<String> list = Arrays.asList(arr); 
	好处：其实可以使用集合的方法操作数组中的元素。
	注意：数组的长度是固定的，所以对于集合的增删方法是不可以使用的；否则会发生UnsupportedOperationException
	如果数组中的元素是对象，那么转成集合时，直接将数组中的元素作为集合中的元素进行集合存储。
	如果数组中的元素是基本类型数值，那么会将该数组作为集合中的元素进行存储。
	
   	<<集合转成数组>>
             使用的就是Collection接口中的toArray方法。String[] arr = list.toArray(new String[list.size()]);
             集合转成数组：可以对集合中的元素操作的方法进行限定，不允许对其进行增删。

传统for和高级for的区别？
	 * 传统for可以完成对语句执行很多次，因为可以定义控制循环的增量和条件。
	 * 
	 * 高级for是一种简化形式。
	 * 它必须有遍历的目标。该目标要么是数组，要么是Collection单列集合。
	 * 
	 * 对数组的遍历如果仅仅是获取数组中的元素，可以使用高级for。
	 * 如果要对数组的角标进行操作建议使用传统for。
		
	高级for可以遍历map集合吗？
		 * 不能直接用，但是可以将map转成单列的set，就可以用了。
		 * 
 函数的可变参数：其实就是一个数组，但是接收的是数组的元素；
 	 * 自动将这些元素封装成数组，简化了调用者的书写。
	 * 注意：可变参数类型，必须定义在参数列表的结尾。








-------=========================

Map：一次添加一对元素；Collection一次添加一个元素；
	Map也称为双列集合，Collection集合称为单列集合。
	其实map集合中存储的就是键值对。
	map集合中必须保证键的唯一性。

常用方法：	
1.添加：
	value put(key, value);返回前一个和key关联 的值，如果没有返回null。
2.删除：
	void clear();清空map集合。
3.判断：
	boolean containsKey(key);
	boolean containsValue(value);
	boolean isEmpty();
4.获取：
	value get(key);通过键获取值，如果没有该键返回null。
					当然可以通过返回null，来判断是否包含指定键。
	is size();获取键值对的个数。
	Collecion<String> values();获取map中的所有的值。
	
通过map转成set就可以迭代
	 * 找到了另一个方法，entrySet()
	 * 该方法将键和值的映射关系作为对象存储到了set集合中，而这个映射关系的类型就是Map.Entry类型（结婚证）
	 * 
	
Map常用的子类：
	|--Hashtable：内部结构是哈希表，是同步的。不允许null作为键、不允许null作为值。
		|--properties：用来存储键值对型的配置文件的信息，可以和IO技术相结合。
	|--HashMap：内部结构是哈希表，不是同步的。允许null作为键、允许null作为值。
	|--TreeMap：内部结构是二叉树，不是同步的。可以对Map集合中的键进行排序。
	
Iterator<Map.Entry<Student, String>> it = tMap.entrySet().iterator();
	
 Map在有映射关系时，可以优先考虑用,在查表法中的应用较为多见。