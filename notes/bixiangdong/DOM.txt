DOM：文档对象模型（Document Object Model）
	DOM：用来将标记型文档封装成对象，并将标记型文档中的所有的内容（标签，文本，属性等）都封装成对象。
		封装成对象的目的是为了更为方便的操作这些文档以及文档中的所有内容。
		因为对象的出现就可以有属性和行为被调用。
	文档对象模型：
	文档：标记型文档。
	对象：封装了属性和行为的实例，可以被直接调用。
	模型：所有标记型文档都具备一些共性特征的一个体现。
			标记型文档（标签，属性，标签中封装的数据）。

	只要是标记型文档，DOM这种技术都可以对其进行操作。

	常见的标记型文档：html xml

	DOM这种技术时如何对标记型文档进行操作的呢？
		要操作标记型文档必须对其进行解析。

	DOM技术的解析方式：将标记型文档解析成一颗DOM树，并将树中的内容都封装成节点对象。

	注意：这个DOM解析方式的好处：可以对树中的节点进行任意操作，比如：增删改查。
	弊端：这种解析需要将整个标记型文档加载进内存。意味着如果表机芯文档的体积很大，较为浪费内存空间。

	简介另一种解析方式：SAX：是由一些组织定义的一种民间常用的解析方式。并不是w3c标准，而DOM时w3c标准。

	SAX解析的方式：基于事件驱动的解析。获取数据的速度很快，但是不能对标记进行：增删改。

	DOM模型有三种：
	DOM level 1：将html文档封装成对象。
	DOM level 2：在level 1基础上加入了新功能，比如解析名称空间。
	DOM level 3：将xml文档封装成了对象。
	

	DHTML：动态的html。不是一门语言，是多项技术综合体的简称。
	其中包含了HTML,CSS,DOM,Javascript这四门语言。

	这四个技术在动态html页面效果定义时，都处于什么样的角色呢？负责什么样的职责呢？

	HTML:负责提供标签，对数据进行封装，目的是便于对该标签中的数据进行操作。
	CSS:负责提供样式属性，对标签中的数据进行样式的定义。
	DOM:负责将标签型文档以及文档中的所有内容进行解析，并封装成对象。在对象中定义了更多的属性和行为，便于对对象操作。
	JS:负责提供程序设计语言，对页面中的对象进行逻辑操作。
	
	简单说：
	HTML:用标签封装数据。
	CSS:对数据进行样式定义。
	DOM:将文档和标签以及其它内容变成对象。
	JS:负责页面的行为定义。就是页面的动态效果。
	
	所有JavaScript是动态效果的主力编程语言。
	
	DHTML+XMLhttpRequest = AJAX
	
BOM:browser Object Model(浏览器对象模型)
	这个模型方便又操作浏览器。

	浏览器对应的对象就是window对象。这个可以通过查阅DHTML api文档。

	
document对象：
	该对象将标记型文档进行封装。
		该对象的作用，是对可以标记型文档进行操作。
		最常见的操作就是，想要实现动态效果，需要对节点操作。那么要先获取到这个节点。
		要想获取节点，必须要先获取到节点所属的文档对象document。
		
		所以document对象最常见的操作就是获取页面中的节点。
		
		获取节点的方法体现：
			1.getElementById：获取对ID标签属性为指定值的第一个对象的引用。
				通过标签的id属性值获取该标签节点，返回该标签节点。
			2.getElementsByName：根据NAME标签属性的值获取对象的集合。
				通过标签的name属性获取节点，因为name有相同，所以返回的一个数组。
			3.getElementsByTagName：获取基于指定元素名称的对象集合。
				通过标签名获取节点，因为标签名会重复，所以返回的是一个数组。
	
		常见节点有三种：
			 		1.标签型节点：类型1
			 		2.属性节点：类型2
			 		3.文本节点：类型3

			 		标签型节点是没有值的，属性和文本节点是可以有值的。
		需求：获取页面中的div节点。
				
				思路：
					通过document对象完成。因为div节点有id属性。所以可以通过id属性来完成获取。
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	