html是标签，css是属性和属性值，JavaScript是程序设计语言。
JavaScript是基于对象和事件驱动的脚本语言，主要应用在客户端。
特点：
	1，交互性（它可以做的就是信息的动态交互。）
	2.安全性（不允许直接访问本地硬盘。）
	3.跨平台性（只要是可以解释js的浏览器都可以执行，和平台无关。）
	
JavaScript和java不同
	1.JS是Netscape公司的产品，前身是livescript；java是sun公司的产品；现在是oracle公式的产品。
	2.js是基于对象，java是面向对象。
	3.js只需解释就可以执行，java需要先编译成字节码文件，再执行。
	4.js是若类型；java是强类型（对每一种数据都定义好其类型，并对该类型所分配的空间进行好定义）。
	
javaScript与HTML的结合方式：
	想要将其他代码融入到HTML中，都是以标签的形式。
	1.js代码存放在标签对<script>js code...</script>中。
	2.当有多个html页面使用到相同的JS脚本时，可以将js代码封装到一个文件中，只要在script标签的src属性引入一个js文件。（方便后期维护，扩展）
		注意：如果在script标签中定义了src属性，那么标签中的内容不会被执行。
		例如：<script src="test.js" type="text/javascript"></script>
	注：规范中script标签早期有一个属性language，而现在使用type属性。
	
JavaScript语法：
	每一种语言都有自己的语法规则，js语法与Java很像，所有学习起来比较容易。js中也一样有变量。语句。函数，数组等常见语言组成元素。
	
	1.变量
		通过关键字var来定义，弱类型既是不用指定具体的数据类型。
		例子：var x = 3; x = "hello";
		注：js中特殊的常量值：undefined，当变量没有初始化就被使用，该变量的值就是undefined（未定义）。
		
		注意：JavaScript的语句在结尾处时可以不用分号结束的。非严谨语言的特点。
			但是为了符合编程规范，需要向Java一样定义结束符。
			而且有些情况下是必须写分号的，如：var x = 3; var y = 5 如果两条语句写在同一行，就需要分号隔开。
	2.运算符
		1.算术运算符
			+ - * /
		2.赋值运算符
			= += -= *= /= %=
		3.比较运算符(true false)
			< > !=
		4.逻辑运算符
			&& || !
		5。位运算符
			| & ^ >> << >>>
		6.三元运算符
			? :
		
				
	
		
		
		
		<!-- 
			js和html相结合的方式：
			1.将JavaScript代码封装到<script>标签中。
			2.将JavaScript代码封装到js文件中，并通过<script>中的src属性进行导入。
			
			注意：如果<script>标签中使用src属性，那么该标签中封装的JavaScript代码不会执行。
			所有通常导入js文件都是用单独<script>来完成。
		 -->
	
		<!-- 导入一个js文件 -->
	 	<script type="text/javascript" src="demo.js"></script> 
		
		<!-- 封装javascript代码 -->
		<scritp type="text/javascript">
		
			alert("hello javascript"); 
			
			
		</script>
		
		
		
		
	<!-- 演示JavaScript语法 -->
	<script type="text/javascript">
	
	<!--
		通常高级程序设计语言所包含的语法内容：
			1.关键字：该种语言中被赋予了特殊含义的单词。
			2.标识符：用于标识数据和表达式的符号。通常可以理解为：在程序中自定义的名称；比如：变量名、函数名
			3.注释：注解说明解释程序，用于调试程序。
			4.变量：用于标识内存中一片空间。用于存储数据，该空间中的数据时可以变化的。当数据不确定的时候，用变量。
			5.运算符：可以让数据进行运算的符号。
			6.语句：用于对程序进行流程控制的表达式。
			7.函数：用于对功能代码进行封装，便于提高复用性。
			8.数组：对多数据进行存储，便于操作。就是传说中的容器。
			9.对象。只要是基于对象的语言，或是面向对象的语言，就存在着对象的概念。
				对象就是一个封装体，即可以封装数据有可以封装函数。
				
			这些都是高级程序设计语言具备的共性内容，只不过各种语言对这些内容的表现形式有所不同。但是使用基本思想一致。
	-->
	</script>
	
	
	
	一些细节：
		1，undefined：未定义，其实它就是一个常量。
		2.要想获取具体的值的类型，可以通过，typeof来完成。
			alert(typeof("abc")=='string');
			alert(typeof(2.5)=='number');
			alert(typeof(true));
			alert(typeof(78));
			alert(typeof('8'));
			
	3，语句：
		1.顺序结构
		2.判断结构
			代表语句：if
				建议将常量放在左边，以报错来修正代码。
		3.选择结构
			switch
		4.循环结构
			while do while for
		5.其它语句
			break:调出选择，跳出循环）
			continue：用于循环语句，结束本次循环，继续下次循环。
		
	4.数组
		javascript中的数组
		数组用于存储更多的数据，是一个容器。
	        特点：
		1.长度是可变的；
		2.元素的类型是任意的；
		建议在使用数组是，存储同一类型的元素，操作起来较为方便。
		
		js中的数组定义了两种方式：
			1.var arr = []; var arr = [1,2,2,4];
			2.使用了JavaScript中的Array对象来完成的定义。
				var arr = new Array();//var arr = [];
				var arr1 = new Array();//数组定义并长度是5.
				var arr2 = new Array(5,6,7);//定义一个数组，元素时567	
				
	5.函数
		
   		//函数的一些细节
   		//1.只要使用函数的名称就是对这个函数的调用；
   		//2.函数中有一个数组在对传入的参数进行存储，这个数组就是arguments
   		function show(z, y){
   			// alert(x+":"+y);
   			// alert(arguments.length);
   			for(var x=0; x<arguments.length; x++){
   				document.write(arguments[x]);
   			}
   		}

   		// show(4, 5, 6, 6, 9);//建议函数中定义几个参数就传递几个参数。
   		

	<script type="text/javascript">
		//函数中的细节2：
		
		function getSum(){
			return 100;
		}

		//var sum = getSum();//getSum函数运行，并将返回的结果复制给sum。
		var sum = getSum;//getSum本身是一个函数名，而函数本身在js中就是一个对象。getSum就是这个函数对象的引用。
						//将getSum这个引用的地址复制给地址赋值给sum。这时sum也指向了这个函数对象。
						//相当于这个函数对象有两个函数名称。
						
		//alert("sum="+sum);//打印的时候如果sum指向的是函数对象，那么会将该函对象的字符串表现形式打印出来。
						//就是该函数的代码定义格式。
	</script>
	
	动态函数：使用的是js中内置的一个对象function.只不过用的不是很多。参数列表，函数体都是通过字符串动态指定的。
	
	匿名函数：没有名字的函数。通常是函数的简写形式。	
			
			
			
		
全局变量：在脚本片段中定义的变量，是全局变量。

常见对象：
	ActiveXObject：
	
	String对象：可用于处理或格式化文本字符串以及确定和定位字符串中的子字符串。(在js中获取字符串长度用的是属性)
		newString = new String("StringLiteral");
		big();
		bold();
		link();
		charAt();

常见方法：toString()方法
	Array:	将Array的元素转换为字符串，结果字符串由逗号分隔，且连接起来。
	Boolean:如果Boolean值是true，则返回“true”，否则，返回“false”。
	Date：	返回日期的文字表示法。
	Error： 	返回一个包含相关错误消息的字符串。
	Function：返回如下格式的字符串，其中function是被调用toString方法函数的名称：
		function functionname(){[native code]}
	Number：	返回数字的文字表示。
	String：	返回String对象的值。
	默认：		返回“[object objectname]”, 其中objectname是对象类型的名称。
			
			
portotype属性：返回对象类型原型的引用。
	虎.prototype.上树 = function(){}	//给老虎添加上树的功能	
	
	/*
	 * 既然trim方法是用来操作字符串的方法，可不可以向字符串已有的方法一样，将该方法也定义到
	 * 字符串对象中呢？直接用字符串对象调用就欧了。
	 * 
	 * 
	 * 这里就可以使用一个该字符串的原型属性来完成；
	 * 原型：就是该对象的一个描述。该描述中如果添加了新功能，那么该对象都会具备这些新功能。
	 * 而prototype就可以对对象的功能进行扩展。
	 * 
	 * 需求：想要给string对象添加一个可以去除字符串两端空格的新功能。
	 * 就可以使用原型属性来完成。
	 * 
	 * 给string的原型中添加一个功能。注意：给对象添加新功能直接使用：对象.新内容    即可。
	 */
			
数组对象：Array	
	join方法：返回字符串值，其中包含了连接到一起的数组的所有元素，元素由指定的分隔符分隔开来。	
	slice：返回一个数组的一段。	（包含头不包含尾）
		newArray = myArray.slice(0, -1);
	sort()：排序；
	pop()：删除并返回最后一个元素
	shift()：删除并返回第一个元素
	reverse()：反转
	splice()：删除元素并进行元素的替换
	unshift()：将指定的元素插入数组开始位置并返回该数组。
			
			
Date对象：日期
	常见方法：parse方法：解析一个包含日期的字符串，并返回该日期与1970年01月01日之间所间隔的毫秒数。是Date对象的静态方法。
	//日期对象和毫秒值之间的转换
		var date2 = new Date();
		//获取毫秒值   日期队形--->毫秒值。
		var time = date.getTime();
		println("time="+time);
		//将毫秒值转成日期对象
		//1.new Date(time);//setTime();
		var date3 = new Date(time);

		//将日期对象和字符串之间进行转换。
			//日期对象转成字符串。toLocaleString   toLocaleDateString
			//将字符串注册日期对象。先将具备指定格式的日期字符串-->毫秒值--->日期对象。				
			
Math对象：该对象中都是静态方法。不需要new， 直接Math调用即可。
	var num1 = Math.ceil(12.34);//返回大于等于指定参数的最小整数。
	var num2 = Math.floor(12.34);//返回小于等于指定数据的最大整数。
	var num3 = Math.round(12.34);//四舍五入
	
	println("num1="+num1);
	println("num2="+num2);
	println("num3="+num3);
	
	var num4 = Math.pow(10,2);//10的2次方
	println("num4="+num4);
	
	println("<hr/>");
	for(var x=0; x<10; x++){//取随机数的整数
//		var num = Math.floor(Math.random()*10+1);
		var num = parseInt((Math.random()*10+1));
		
		println(num);
	}
	
Number对象：代表数值数据类型和提供数值常数的对象。		
	numObj = new Number(value);


全局对象：global:是一个固有对象，目的是把所有全局方法集中在一个对象中。（没有语法，直接调用即可）	
	全局方法：
		parseInt：返回由字符串转换得到的整数。
		unescape：
		parseFloat：
		isNaN：
		isFinite：
		eval：
		escape：	
		
自定义对象：
	//当对象多的时候，使用这种方法存储
		 var myMap = {
				 
				 // names:["lisi1","lisi2","lisi3"], nums:[30,35,65]
				 names:[{name1:"zhangsan"},{myname1:"hahahaha"}]
		 }
		 
		 //alert(myMap.names[1]);
		 
		 alert(myMap.names[0].name1);		
				
/*
	对table表格中的ul进行样式定义
	list-style: none;//去除无序列表的样式
	margin: 0px;//将列表的外边距取消
	padding:0px;//将列表的内边距取消
 */
	table ul{
		list-style: none;
		margin:0px;
		background-color: #26e356;
		display: none;
		padding: 0px;
	}	

		
			
		